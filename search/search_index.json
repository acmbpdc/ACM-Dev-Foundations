{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"ACM Dev Foundations      Learning Web Development"},{"location":"#getting-started","title":"Getting Started \ud83d\ude80","text":"<p>The Dev Foundations sessions will cover everything you need to get started on your Dev journey!</p> <p>Feel free to ask our council anything that comes to your mind!</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>Nope, nothing! Enjoy the journey as you learn Web Dev from scratch!</p>"},{"location":"#session-timings","title":"Session timings","text":"<p>Total Duration: 4 weeks</p> <p>Session duration: 4:30 pm - 6:30 pm</p> <p>Session mode: Hybrid</p>"},{"location":"#session-details","title":"Session details","text":"Session Topic Content Speakers Date Week 1 Flask (Backend) Python installation + Intro to Flask Sai Uday, Riyan Bhargava 7 Nov 2024 Week 2 HTML CSS JS (Frontend) HTML + CSS + Manipulating DOM with JavaScript Mohammed Ruknuddin 14 Nov 2024 Week 3 Final Project Complete, full stack project from scratch Mustafa Fatehi 21 Nov Week 4 Deployment On PythonAnywhere GitHub + Deployment on PythonAnywhere Sanvit Katrekar 24 Nov 2024"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>This series will only cover the basics, if you're interested in this field, you'll have to keep the grind going yourself through self learning.</p> <p>If you have any doubts on the topics beyond this ones discussed in this series, or need any help in any of your personal projects, we are not to be disturbed.</p> <p>Just kidding! Feel free to contact any of our council members, and we'll try to help you out as best we can!</p>"},{"location":"#technologies","title":"Technologies","text":""},{"location":"Week%201%3A%20Flask%20%28Backend%29/","title":"Flask Workshop","text":"<p>Welcome to the Flask Workshop! This guide will introduce you to Flask, a powerful web framework for Python, and guide you through building web applications from scratch.</p>"},{"location":"Week%201%3A%20Flask%20%28Backend%29/#1-basics-of-web-development","title":"1. Basics of Web Development","text":"<p>Web development is the process of building and maintaining websites and web applications that run online. Web development began with the creation of the World Wide Web in 1989 by Sir Tim Berners-Lee, a British scientist working at CERN (European Organization for Nuclear Research). </p> <p>He proposed a system for sharing information across a network using hypertext, which led to the development of HTML (Hypertext Markup Language) and HTTP (Hypertext Transfer Protocol)).</p> <p> Now for understanding basics of web development, there's some key concepts to understand, and some of them are listed below:</p> <ol> <li>Front-end Development:  Front end basically means it is what u see on the screen. It works on how the information is displayed to the user, and how interactive it is. Some common languages are HTML, CSS, Javascript. </li> <li> <p>Back-end Development: Backend is where the data gets processed, and functionality is done and is sent back to the user. There's much to back-end development, but some of the basic concepts are listed below:</p> </li> <li> <p>Server-Side Languages: Server-side languages are programming languages used to build the backend of a web application, which includes handling data, business logic, and server-side operations. The backend is crucial for creating dynamic, data-driven applications and supports the frontend by processing requests, interacting with databases, and managing content delivery. Flask is what we'll be covering today, and this is a server-side framework by Python.</p> </li> <li>Databases: Data from the user is stored into databases such as MySQL, PostgreSQL, MongoDB, or SQLite.</li> <li>API's: APIs (Application Programming Interfaces): APIs enable communication between the frontend and backend of a web application. Think of an API as a messenger or \"middleman\" in a restaurant: when a customer (the frontend) places an order, the waiter (the API) takes the order to the kitchen (the backend), where the chef prepares the food. The waiter then brings the prepared food back to the customer. Similarly, APIs handle requests from the frontend, retrieve the necessary data or actions from the backend, and deliver the response back to the frontend, ensuring smooth interaction between different parts of a web application.</li> </ol>"},{"location":"Week%201%3A%20Flask%20%28Backend%29/#2-introduction-to-python","title":"2. Introduction to Python","text":"<p>A hearty welcome to all who made it to the introductory workshop for python and flask! </p> <p>First, we will be covering the basic concepts of Python, then we will be moving on to flask. Now, what is python? is it a snake? No, its a programming language. Weird name ryt? This was named by \"Guido van Rossum\", and it was because he saw a real life python. No no im kidding, it was because of the series \"Monty Python's Flying Circus\", he wanted to keep something short and simple.</p> <p>Python is a very versatile language and is used in a lot of different CS fields such as </p> <ol> <li>AI and ML</li> <li>Data Analysis</li> <li>Web development</li> <li>Robotics and Computer Vision</li> </ol> <p>Why Python?</p> <ul> <li>Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).</li> <li>Python has a simple syntax similar to the English language.</li> <li>Python has syntax that allows developers to write programs with fewer lines than some other programming languages.</li> <li>Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.</li> <li>Python can be treated in a procedural way, an object-oriented way or a functional way.</li> </ul> <p>Now, coming to the main coding and fun part, its divided into sections as below.</p>"},{"location":"Week%201%3A%20Flask%20%28Backend%29/#3-workshop-prerequisites","title":"3. Workshop Prerequisites","text":"<p>Before the workshop, ensure you have: - Python (version 3.x) installed - A code editor, like Visual Studio Code - pip, the Python package manager (usually included with Python) For a step-by-step setup guide, Click here.  </p> <p>If you want to acess some of the useful VS Code shortcuts, that you could use in this workshop, Click here (But try to use them minimally, as there are no shortcuts in life :) )</p>"},{"location":"Week%201%3A%20Flask%20%28Backend%29/#4-displaying-hello-world-in-terminal","title":"4. Displaying hello world in terminal","text":"<pre><code>print(\"output:hello world\")\n</code></pre> <pre><code>output: hello world\n</code></pre> <p>Using the print function, any line of statement, character can be displayed. \"Print\" is for showing the output.</p>"},{"location":"Week%201%3A%20Flask%20%28Backend%29/#5-variables-and-variable-names","title":"5. Variables and Variable names","text":"<p>Variables are names to which we assign values.</p> <p>For example, x=5. x is the variable name here.</p> <p>Code example:</p> <pre><code>x=5\nprint(\"output:\",x)\n</code></pre> <pre><code>output: 5\n</code></pre> <p>Variables can be reassigned, and the latest value gets printed.</p> <pre><code>x=5\nx=\"Introduction to python and flask\"\nprint(\"latest output:\",x)\n</code></pre> <pre><code>latest output: Introduction to python and flask\n</code></pre> <p>Variables are case sensitive.</p> <pre><code>x=5\nX=6\nprint(\"output:\",X)\n</code></pre> <pre><code>output:6\n</code></pre> <p>Some rules for the variable names:</p> <ul> <li>A variable name must start with a letter or the underscore character</li> <li>A variable name cannot start with a number</li> <li>A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )</li> <li>Variable names are case-sensitive (age, Age and AGE are three different variables)</li> <li>A variable name cannot be any of the Python keywords such as \"if, elif, while, for\" etc.</li> </ul> <p>Assigning multiple values for example:</p> <pre><code>x,y,z=10,15,20\nprint(x,y,z)\n</code></pre> <pre><code>10 15 20\n</code></pre>"},{"location":"Week%201%3A%20Flask%20%28Backend%29/#6-data-types","title":"6. Data Types","text":"Text Type: <code>str</code> Numeric Types: <code>int</code>, <code>float</code>, <code>complex</code> Sequence Types: <code>list</code>, <code>tuple</code>, Mapping Type: <code>dict</code> Boolean Type: <code>bool</code> <p>We can get the data type of a variable using the type function and the code function is shown below.</p> <pre><code>x=5\nprint(type(x))\n</code></pre> <pre><code>&lt;class 'int'&gt;\n</code></pre> <p>Type casting- Changing the type of a variable to another type considering it follows some rules.\\ Code examples:</p> <pre><code>x=str(5)\nprint(\"output:\",x)\nprint(\"type:\",type(x))\n</code></pre> <pre><code>output: 5\ntype: &lt;class 'str'&gt;\n</code></pre> <pre><code>x=int(\"sai\")\nprint(x)\nprint(type(x))\n</code></pre> <p>The above code gives an error, because \"sai\" cannot be converted to an integer.</p>"},{"location":"Week%201%3A%20Flask%20%28Backend%29/#7-conditional-keywords-if-elif-else","title":"7. Conditional Keywords ( if elif else)","text":"<p>In conditional keywords,  a statement is given, and \"if\" it is true, then it will print, or else it will go to the next \"else\".</p> <p>For example:</p> <pre><code>x=5\nif(x==5):\n  print(\"Yes it is 5\")\nelif(x==4):\n  print(\"No, it is 4\")\nelse:\n  print(\"No, it is not 5\")\n</code></pre> <pre><code>Yes it is 5\n</code></pre>"},{"location":"Week%201%3A%20Flask%20%28Backend%29/#8-loops","title":"8. Loops","text":"<p>Loops repeat a block of code multiple times, until the condition is false.</p>"},{"location":"Week%201%3A%20Flask%20%28Backend%29/#while-loop","title":"While loop","text":"<pre><code>i=0\nwhile(i&lt;3):\n  print(i)\n  i=i+1\n</code></pre> <pre><code>0\n1\n2\n</code></pre>"},{"location":"Week%201%3A%20Flask%20%28Backend%29/#for-loop","title":"For loop","text":"<pre><code>for i in range(3):\n  print(i)\n</code></pre> <pre><code>0\n1\n2\n</code></pre>"},{"location":"Week%201%3A%20Flask%20%28Backend%29/#9-functions","title":"9. Functions","text":"<p>This is the main part which is used for flask. Now,  Functions are blocks of code that can be repeated to do a specific task. There's a return statement to return the value that is done in the function. For example:</p> <pre><code>def x():\n  return 1\ny=x()\nprint(y)\n</code></pre> <pre><code>1\n</code></pre> <pre><code>def sum(x):\n  return x+x\ny=sum(3)\nprint(y)\n</code></pre> <pre><code>6\n</code></pre> <pre><code>def greet(name):\n    \"\"\"Function to greet a person with their name.\"\"\"\n    print(\"Hello, \" + name + \"!\")\n\n# Calling the function\ngreet(\"Alice\")  # Output: Hello, Alice!\ngreet(\"Bob\")    # Output: Hello, Bob!\n</code></pre> <pre><code>Hello, Alice!\nHello, Bob!\n</code></pre>"},{"location":"Week%201%3A%20Flask%20%28Backend%29/#10-strings","title":"10. Strings","text":"<p>Strings are used with '' or \"\". </p> <pre><code>x=\"sai\"\ny='sai'\nprint(x)\nprint(y)\n</code></pre> <pre><code>sai\nsai\n</code></pre> <p>String functions:</p> <pre><code>text = \"   Hello, Python!   \"\ntext_with_digits = \"12345\"\nnumber = 123\n\n# 1. Basic String Operations\nprint(\"1. Basic String Operations\")\nlength = len(text)\nprint(\"Length of 'text':\", length)  # Output: 19\n\nstr_number = str(number)\nprint(\"Converted Number to String:\", str_number)  # Output: \"123\"\nprint(\"-\" * 30)\n\n# 2. String Case Manipulation\nprint(\"2. String Case Manipulation\")\nprint(\"Lowercase:\", text.lower())  # Output: \"   hello, python!   \"\nprint(\"Uppercase:\", text.upper())  # Output: \"   HELLO, PYTHON!   \"\nprint(\"Capitalized:\", text.capitalize())  # Output: \"   hello, python!   \"\nprint(\"Title Case:\", text.title())  # Output: \"   Hello, Python!   \"\nprint(\"Swap Case:\", text.swapcase())  # Output: \"   hELLO, pYTHON!   \"\nprint(\"-\" * 30)\n\n# 3. String Searching\nprint(\"3. String Searching\")\nindex = text.find(\"Python\")\nprint(\"Index of 'Python':\", index)  # Output: 10\n\nnot_found = text.find(\"Java\")\nprint(\"Index of 'Java':\", not_found)  # Output: -1\n\nlast_index = text.rfind(\"o\")\nprint(\"Last index of 'o':\", last_index)  # Output: 14\nprint(\"-\" * 30)\n\n# 4. String Replacement\nprint(\"4. String Replacement\")\nnew_text = text.replace(\"Python\", \"World\")\nprint(\"Replaced Text:\", new_text)  # Output: \"   Hello, World!   \"\nprint(\"-\" * 30)\n\n# 5. String Splitting and Joining\nprint(\"5. String Splitting and Joining\")\nfruits_text = \"apple, banana, cherry\"\nfruits = fruits_text.split(\", \")\nprint(\"Split List:\", fruits)  # Output: ['apple', 'banana', 'cherry']\n\njoined_text = \", \".join(fruits)\nprint(\"Joined Text:\", joined_text)  # Output: \"apple, banana, cherry\"\nprint(\"-\" * 30)\n</code></pre> <pre><code>1. Basic String Operations\nLength of 'text': 20\nConverted Number to String: 123\n------------------------------\n2. String Case Manipulation\nLowercase:    hello, python!   \nUppercase:    HELLO, PYTHON!   \nCapitalized:    hello, python!   \nTitle Case:    Hello, Python!   \nSwap Case:    hELLO, pYTHON!   \n------------------------------\n3. String Searching\nIndex of 'Python': 10\nIndex of 'Java': -1\nLast index of 'o': 14\n------------------------------\n4. String Replacement\nReplaced Text:    Hello, World!   \n------------------------------\n5. String Splitting and Joining\nSplit List: ['apple', 'banana', 'cherry']\nJoined Text: apple, banana, cherry\n------------------------------\n</code></pre>"},{"location":"Week%201%3A%20Flask%20%28Backend%29/#11-lists","title":"11. Lists","text":"<p>Lists store collections of items in a specific order. Each item has an index starting from 0.</p> <pre><code>tasks=['task1','task2'] #this is a list\nfor i in tasks:\n  print(i)\n</code></pre> <pre><code>task1\ntask2\n</code></pre>"},{"location":"Week%201%3A%20Flask%20%28Backend%29/#basic-functions-of-lists","title":"Basic Functions of lists","text":"<p>append: adds values into the list</p> <p>remove: removes values from the list</p> <pre><code># Creating a list\nshopping_list = [\"apples\", \"bananas\", \"carrots\"]\n\n# Accessing items\nprint(shopping_list[0])  # Output: apples\n\n# Adding an item\nshopping_list.append(\"dates\")\n\n# Changing an item\nshopping_list[1] = \"blueberries\"  # Change 'bananas' to 'blueberries'\n\n# Removing an item\nshopping_list.remove(\"carrots\")\n\n# Printing the updated shopping list\nprint(shopping_list)\n</code></pre> <pre><code>apples\n['apples', 'blueberries', 'dates']\n</code></pre>"},{"location":"Week%201%3A%20Flask%20%28Backend%29/#12-dictionaries","title":"12. Dictionaries","text":"<p>A dictionary in Python is a collection of key-value pairs.</p> <p>Some basic functions have been explained in the code below.</p> <pre><code># Creating a dictionary\nphone_book = {\n    \"Alice\": \"123-456-7890\",\n    \"Bob\": \"987-654-3210\",\n    \"Charlie\": \"555-555-5555\"\n}\n\n# Accessing values\nprint(phone_book[\"Alice\"])  # Output: 123-456-7890\n\n# Adding a new entry\nphone_book[\"David\"] = \"111-222-3333\"\n\n# Updating an existing entry\nphone_book[\"Bob\"] = \"999-999-9999\"\n\n# Removing an entry\ndel phone_book[\"Charlie\"]\n\n# Printing the updated phone book\nprint(phone_book)\n</code></pre> <pre><code>123-456-7890\n{'Alice': '123-456-7890', 'Bob': '999-999-9999', 'David': '111-222-3333'}\n</code></pre>"},{"location":"Week%201%3A%20Flask%20%28Backend%29/#13-introduction-to-flask","title":"13. Introduction to Flask","text":"<p>Flask is a lightweight framework for web development in Python, designed to make creating web applications easy and flexible. It\u2019s known for its simplicity and extensive customization options, making it ideal for beginners and experts alike.</p>"},{"location":"Week%201%3A%20Flask%20%28Backend%29/#key-features-of-flask","title":"Key Features of Flask","text":"<ul> <li>Minimal setup and easy to learn</li> <li>Supports extensions for additional functionality</li> <li>Works well with other Python libraries</li> </ul>"},{"location":"Week%201%3A%20Flask%20%28Backend%29/#14-setting-up-your-environment","title":"14. Setting Up Your Environment","text":"<ol> <li> <p>Create a folder for the workshop project.</p> </li> <li> <p>Open the folder using VS Code, and install virtual environment by typing the following code in the VS Code terminal:- <code>pip3 install virtualenv</code></p> </li> <li> <p>Type the following code to create the environment in you folder:- <code>python -m venv venv</code></p> </li> <li> <p>Activate the environment:-  </p> <ul> <li>Windows:   <code>.\\venv\\Scripts\\activate</code> </li> </ul> <p>Note: You may get an error called PowerShell Execution Policy Restriction or a PSSecurityException.   It occurs because PowerShell\u2019s execution policy restricts script execution to prevent potentially harmful scripts from running on the system.   For that you can run the code <code>Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass</code> and then try activating it again.    This temporarily changes PowerShell\u2019s execution policy for the current session only, allowing scripts to run without restrictions.  </p> <ul> <li>macOS/Linux:   <code>source venv/bin/activate</code></li> </ul> </li> <li> <p>Installing Flask:-     Run <code>pip3 install flask</code> on the VS Code terminal.</p> </li> </ol>"},{"location":"Week%201%3A%20Flask%20%28Backend%29/#15-getting-started-with-flask","title":"15. Getting Started with Flask","text":"<p>Creating Your First Flask App</p> <ol> <li> <p>Create a file named <code>app.py</code> in your project folder.</p> </li> <li> <p>Add the following code:</p> <p><pre><code>from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n    return \"Welcome to the Flask Workshop!\"\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> Explanation of Key Parts: - <code>app = Flask(__name__)</code> initializes the app, using the module's name to configure Flask. - <code>@app.route('/')</code> sets the route for the root URL, directing requests to the index() function. - <code>app.run(debug=True)</code> starts the app in debug mode, which automatically reloads the server on code changes and provides detailed error messages.  </p> </li> <li> <p>Run the code:-     Run <code>python3 app.py</code> on the terminal after saving your app.py file.</p> </li> <li> <p>Opening the Webpage:-     Go to your browser and type in <code>localhost:5000</code></p> </li> <li> <p>View the Output</p> </li> </ol>"},{"location":"Week%201%3A%20Flask%20%28Backend%29/#16-working-with-templates","title":"16. Working with Templates","text":"<ol> <li> <p>Create a folder <code>templates</code> in your project.</p> </li> <li> <p>Add <code>index.html</code> in <code>templates</code> </p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    Welcome to Flask Workshop!\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Modify <code>app.py</code>:  </p> <pre><code>from flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> </li> </ol>"},{"location":"Week%201%3A%20Flask%20%28Backend%29/#17-template-inheritance","title":"17. Template Inheritance","text":"<p>Template inheritance in Flask allows you to define a base template with common elements (like headers, footers) and extend it in other templates, promoting code reuse and consistent design.  </p> <ol> <li> <p>Add <code>base.html</code> in <code>templates</code>: <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    {% block head %}{% endblock %} &lt;!--Jinja code template--&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    {% block body %}{% endblock %}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> </li> <li> <p>Modify <code>index.html</code> in <code>templates</code>:  </p> <pre><code>{% extends 'base.html' %}\n\n{% block head %} &lt;h1&gt;ACM FLASK WORKSHOP&lt;/h1&gt; {% endblock %}\n\n{% block body %} &lt;h2&gt;Template&lt;/h2&gt; {% endblock %}\n</code></pre> </li> <li> <p>Try searching <code>localhost:5000</code> on your browser and view the output.</p> </li> </ol>"},{"location":"Week%201%3A%20Flask%20%28Backend%29/#18-about-the-project","title":"18. About the Project","text":""},{"location":"Week%201%3A%20Flask%20%28Backend%29/#acm-task-manager-web-application","title":"ACM Task Manager Web Application","text":"<p>We are going to make a Task Manager Web Application where the users are allowed to: 1. Add tasks with descriptions. 2. Display tasks in a table format, showing the task description and date added. 3. Update or delete tasks using action links.</p>"},{"location":"Week%201%3A%20Flask%20%28Backend%29/#19-updating-the-ui","title":"19. Updating the UI","text":"<ol> <li>Making changes in <code>index.html</code>  (Yes!!, just copy paste)     <pre><code>{% extends 'base.html' %}\n\n{% block head %} &lt;h1&gt;ACM TASK MANAGER&lt;/h1&gt; {% endblock %}\n\n{% block body %}\n&lt;div class=\"content\"&gt;\n\n    &lt;table&gt;\n        &lt;tr&gt;\n            &lt;th&gt;Task&lt;/th&gt;\n            &lt;th&gt;Added&lt;/th&gt;\n            &lt;th&gt;Actions&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;&lt;/td&gt;\n            &lt;td&gt;&lt;/td&gt;\n            &lt;td&gt;\n                &lt;a href=\"\"&gt;Delete&lt;/a&gt;\n                &lt;br&gt;\n                &lt;a href=\"\"&gt;Update&lt;/a&gt;\n            &lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/table&gt;\n&lt;/div&gt;\n{% endblock %}\n</code></pre></li> </ol> <p>Try searching <code>localhost:5000</code> on your browser and view the output.</p>"},{"location":"Week%201%3A%20Flask%20%28Backend%29/#20-post-and-get-methods","title":"20. POST and GET methods","text":"<ul> <li> <p>In Flask:</p> <ul> <li> <p>GET: Retrieves data from the server. It\u2019s used for reading or displaying data. Data is sent via the URL, visible to the user. Commonly used for loading pages.</p> </li> <li> <p>POST: Sends data to the server to create or update resources. It\u2019s hidden from the URL, typically used for form submissions where data (e.g., login credentials) is sent securely  </p> </li> </ul> </li> <li> <p>In <code>app.py</code> we make the following changes:-</p> <ul> <li>Import <code>request</code>, <code>redirect</code> and <code>datetime</code> libraries</li> <li>Sending request for <code>POST</code> method, for \"Add Task\" feature</li> </ul> <pre><code>from flask import Flask, render_template, request, redirect\nfrom datetime import datetime\n\napp = Flask(__name__)\n\n# In-memory list to store tasks\ntasks = []\n\n@app.route('/', methods=['POST', 'GET'])\ndef index():\n    if request.method == 'POST':\n        task_content = request.form['content']\n        new_task = {\n            'id': len(tasks) + 1,\n            'content': task_content,\n            'date_created': datetime.utcnow()\n        }\n        tasks.append(new_task)\n        return redirect('/')\n    else:\n        return render_template('index.html', tasks=tasks)\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> </li> <li> <p>Update <code>index.html</code> in order to perform the following tasks:-</p> <ul> <li>Creating a form section to Add Task</li> <li>Creating links for \"Update\" and \"Delete\"</li> </ul> <pre><code>{% extends 'base.html' %}\n\n{% block head %} &lt;h1&gt;ACM TASK MANAGER &lt;/h1&gt; {% endblock %}\n\n{% block body %}\n&lt;div class=\"content\"&gt;\n\n    &lt;table&gt;\n        &lt;tr&gt;\n            &lt;th&gt;Task&lt;/th&gt;\n            &lt;th&gt;Added&lt;/th&gt;\n            &lt;th&gt;Actions&lt;/th&gt;\n        &lt;/tr&gt;\n        {%  for task in tasks %}\n            &lt;tr&gt;\n                &lt;td&gt;{{ task.content }}&lt;/td&gt;\n                &lt;td&gt;{{ task.date_created.date() }}&lt;/td&gt;\n                &lt;td&gt;\n                    &lt;a href=\"\"&gt;Delete&lt;/a&gt;\n                    &lt;br&gt;\n                    &lt;a href=\"\"&gt;Update&lt;/a&gt;\n                &lt;/td&gt;\n            &lt;/tr&gt;\n        {% endfor %}\n    &lt;/table&gt;\n\n    &lt;form action=\"/\" method=\"POST\"&gt;\n        &lt;input type=\"text\" name=\"content\" id=\"content\"&gt;\n        &lt;input type=\"submit\" value=\"Add Task\"&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n{% endblock %}\n</code></pre> </li> <li> <p>Try searching <code>localhost:5000</code> on your browser and view the output.</p> </li> <li> <p>Now, we will work on the \"Delete\" and \"Update\" feature in our ACM Task Manager. We have just created links for them, but they are not going to work unless we update <code>app.py</code>.  </p> <ul> <li> <p>For that we can add \"delete\" and \"update\" function in <code>app.py</code> and accordingly update the code:</p> <pre><code>from flask import Flask, render_template, request, redirect\nfrom datetime import datetime\n\napp = Flask(__name__)\n\n# In-memory list to store tasks\ntasks = []\n\n@app.route('/', methods=['POST', 'GET'])\ndef index():\n    if request.method == 'POST':\n        task_content = request.form['content']\n        new_task = {\n            'id': len(tasks) + 1,\n            'content': task_content,\n            'date_created': datetime.utcnow()\n        }\n        tasks.append(new_task)\n        return redirect('/')\n    else:\n        return render_template('index.html', tasks=tasks)\n\n@app.route('/delete/&lt;int:id&gt;')\ndef delete(id):\n    global tasks\n    tasks = [task for task in tasks if task['id'] != id]\n    return redirect('/')\n\n@app.route('/update/&lt;int:id&gt;', methods=['GET', 'POST'])\ndef update(id):\n    task = next((task for task in tasks if task['id'] == id), None)\n    if not task:\n        return 'Task not found', 404\n\n    if request.method == 'POST':\n        task['content'] = request.form['content']\n        return redirect('/')\n    else:\n        return render_template('update.html', task=task)\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> </li> <li> <p>Update <code>index.html</code>:     <pre><code>{% extends 'base.html' %}\n\n{% block head %} &lt;h1&gt;ACM TASK MANAGER &lt;/h1&gt; {% endblock %}\n\n{% block body %}\n&lt;div class=\"content\"&gt;\n\n    &lt;table&gt;\n        &lt;tr&gt;\n            &lt;th&gt;Task&lt;/th&gt;\n            &lt;th&gt;Added&lt;/th&gt;\n            &lt;th&gt;Actions&lt;/th&gt;\n        &lt;/tr&gt;\n        {%  for task in tasks %}\n            &lt;tr&gt;\n                &lt;td&gt;{{ task.content }}&lt;/td&gt;\n                &lt;td&gt;{{ task.date_created.date() }}&lt;/td&gt;\n                &lt;td&gt;\n                    &lt;a href=\"/delete/{{task.id}}\"&gt;Delete&lt;/a&gt;\n                    &lt;br&gt;\n                    &lt;a href=\"/update/{{task.id}}\"&gt;Update&lt;/a&gt;\n                &lt;/td&gt;\n            &lt;/tr&gt;\n        {% endfor %}\n    &lt;/table&gt;\n\n    &lt;form action=\"/\" method=\"POST\"&gt;\n        &lt;input type=\"text\" name=\"content\" id=\"content\"&gt;\n        &lt;input type=\"submit\" value=\"Add Task\"&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n{% endblock %}\n</code></pre></p> </li> <li> <p>Now, we will also have to add the file <code>update.html</code> inside templates because, on clicking 'update' we will be redirected to another webpage, where we will update the task and submit it.</p> <pre><code>{% extends 'base.html' %}\n\n{% block head %} &lt;h1&gt;ACM TASK MANAGER&lt;/h1&gt; {% endblock %} \n{% block body %}\n&lt;div class=\"content\"&gt;\n    &lt;h2&gt;Update Task&lt;/h2&gt;\n    &lt;form action=\"/update/{{task.id}}\" method=\"POST\"&gt;\n        &lt;input type=\"text\" name=\"content\" id=\"content\" value=\"{{task.content}}\"&gt;\n        &lt;input type=\"submit\" value=\"Update\"&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n{% endblock %}\n</code></pre> </li> </ul> </li> </ul>"},{"location":"Week%201%3A%20Flask%20%28Backend%29/#21-conclusion","title":"21. Conclusion","text":"<p>Congratulations on completing the Flask Workshop! You've built a fully functional task management application with Flask, utilizing various features like routing and templates.</p> <p>Next Steps To further your Flask knowledge, consider exploring: - Flask extensions like Flask-Login for user authentication or Flask-WTF for form handling. - Deployment of your Flask app to platforms like Heroku or DigitalOcean (which is going to be taught in this ACM-Dev Workshop Series in the further sessions).  </p> <p>Additional Resources - For more information, check out the Flask Documentation and explore additional projects to enhance your skills.</p> <p>Happy Coding! \ud83d\ude80</p>"},{"location":"Week%201%3A%20Flask%20%28Backend%29/src/app/","title":"App","text":"In\u00a0[\u00a0]: Copied! <pre>from flask import Flask, render_template, request, redirect\nfrom datetime import datetime\n</pre> from flask import Flask, render_template, request, redirect from datetime import datetime In\u00a0[\u00a0]: Copied! <pre>app = Flask(__name__)\n</pre> app = Flask(__name__) In\u00a0[\u00a0]: Copied! <pre># In-memory list to store tasks\ntasks = []\n</pre> # In-memory list to store tasks tasks = [] In\u00a0[\u00a0]: Copied! <pre>@app.route('/', methods=['POST', 'GET'])\ndef index():\n    if request.method == 'POST':\n        task_content = request.form['content']\n        new_task = {\n            'id': len(tasks) + 1,\n            'content': task_content,\n            'date_created': datetime.utcnow()\n        }\n        tasks.append(new_task)\n        return redirect('/')\n    else:\n        return render_template('index.html', tasks=tasks)\n</pre> @app.route('/', methods=['POST', 'GET']) def index():     if request.method == 'POST':         task_content = request.form['content']         new_task = {             'id': len(tasks) + 1,             'content': task_content,             'date_created': datetime.utcnow()         }         tasks.append(new_task)         return redirect('/')     else:         return render_template('index.html', tasks=tasks) In\u00a0[\u00a0]: Copied! <pre>@app.route('/delete/&lt;int:id&gt;')\ndef delete(id):\n    global tasks\n    tasks = [task for task in tasks if task['id'] != id]\n    return redirect('/')\n</pre> @app.route('/delete/') def delete(id):     global tasks     tasks = [task for task in tasks if task['id'] != id]     return redirect('/') In\u00a0[\u00a0]: Copied! <pre>@app.route('/update/&lt;int:id&gt;', methods=['GET', 'POST'])\ndef update(id):\n    task = next((task for task in tasks if task['id'] == id), None)\n    if not task:\n        return 'Task not found', 404\n\n    if request.method == 'POST':\n        task['content'] = request.form['content']\n        return redirect('/')\n    else:\n        return render_template('update.html', task=task)\n</pre> @app.route('/update/', methods=['GET', 'POST']) def update(id):     task = next((task for task in tasks if task['id'] == id), None)     if not task:         return 'Task not found', 404      if request.method == 'POST':         task['content'] = request.form['content']         return redirect('/')     else:         return render_template('update.html', task=task) In\u00a0[\u00a0]: Copied! <pre>if __name__ == '__main__':\n    app.run(debug=True)\n</pre> if __name__ == '__main__':     app.run(debug=True)"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/","title":"Introduction to Frontend Development","text":""},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/#1-what-is-frontend-development","title":"1. What is Frontend Development?","text":"<p>Frontend development is creating the part of a website or app that users interact with. This includes everything you see and interact with on a website, like buttons, images, and text.</p>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/#2-key-concepts-in-frontend-development","title":"2. Key Concepts in Frontend Development","text":"<p>Frontend development has three main building blocks:</p> <ul> <li>HTML (HyperText Markup Language): The structure of a webpage.</li> <li>CSS (Cascading Style Sheets): Styles that make the webpage look nice.</li> <li>JavaScript: Adds interactive elements to make a page dynamic.</li> </ul> <p></p>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/#3-frontend-development-basics","title":"3. Frontend Development Basics","text":""},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/#html","title":"HTML","text":"<ul> <li>HTML Basics: Tags, elements, and attributes create the page structure.</li> <li>Semantic HTML: Using tags like <code>&lt;header&gt;</code>, <code>&lt;footer&gt;</code>, <code>&lt;section&gt;</code> for better readability and SEO.</li> </ul>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/#css","title":"CSS","text":"<ul> <li>CSS Basics: Used to style HTML elements with properties like colors and fonts.</li> <li>Box Model: Understand the spacing of elements (margin, border, padding).</li> <li>Layouts: Flexbox and Grid are useful for making responsive (mobile-friendly) layouts.</li> </ul>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/#javascript","title":"JavaScript","text":"<ul> <li>JavaScript Basics: Adds logic, like showing a popup when a button is clicked.</li> <li>DOM Manipulation: Lets you change the HTML structure using JavaScript.</li> <li>ES6+ Features: Modern features like arrow functions and classes make JavaScript easier to write.</li> </ul>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/#4-popular-tools-in-frontend-development","title":"4. Popular Tools in Frontend Development","text":""},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/#frameworks-and-libraries","title":"Frameworks and Libraries","text":"<p> - React: Helps build user interfaces more easily. - Vue.js: A simple framework for building interactive web applications. - Angular: A powerful framework for building complex apps.</p> <ul> <li>or you could use C language, if you don't like being free time (this is a joke)</li> </ul> <p></p>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/#text-editors","title":"Text Editors","text":"<ul> <li>VS Code: One of the most popular code editors.</li> <li>Atom: User-friendly and customizable.</li> </ul>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/#version-control-with-git","title":"Version Control with Git","text":"<ul> <li>Git and GitHub: Used to track code changes and collaborate with others.</li> </ul>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/#5-making-websites-responsive","title":"5. Making Websites Responsive","text":"<ul> <li>Responsive Design: Ensures a website looks good on all devices (like phones and tablets).</li> <li>Media Queries: Allow you to apply different styles for different screen sizes.</li> </ul>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/#6-web-accessibility-basics","title":"6. Web Accessibility Basics","text":"<p>Making sure a website is usable for everyone, including people with disabilities, is essential:</p> <ul> <li>Semantic HTML: Helps screen readers understand the structure.</li> </ul>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/#7-resources-for-learning-frontend-development","title":"7. Resources for Learning Frontend Development","text":"<ul> <li>Documentation: Mozilla Developer Network (MDN) Web Docs, W3Schools</li> <li>Online Courses: FreeCodeCamp, Codecademy</li> <li>Communities: Stack Overflow, Dev.to</li> </ul>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/#_1","title":"Introduction to Frontend Development","text":"<p>This guide provides the basics of frontend development and a roadmap to start learning and building projects.</p>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/CSS/","title":"\ud83d\udcd8 Styling Your Webpages With CSS &amp; Bootstrap","text":""},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/CSS/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Introduction to CSS</li> <li>CSS Syntax</li> <li>CSS Box Model</li> <li>CSS Selectors</li> <li>Basic CSS Properties</li> <li>CSS Flexbox</li> <li>CSS Grid</li> <li>Copying &amp; Pasting CSS</li> <li>Bootstrap CSS Basics</li> <li>Conclusion</li> </ol>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/CSS/#introduction-to-css","title":"\ud83d\udccc Introduction to CSS","text":"<p>CSS (Cascading Style Sheets) is used to style and layout web pages. It controls the appearance of HTML elements, allowing you to customize colors, fonts, layouts, and more.</p>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/CSS/#css-syntax","title":"\u270f\ufe0f CSS Syntax","text":"<pre><code>selector {\n  property: value;\n}\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/CSS/#example","title":"Example","text":"<pre><code>p {\n  color: blue;\n  font-size: 18px;\n}\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/CSS/#css-box-model","title":"\ud83d\udce6 CSS Box Model","text":"<p>The CSS Box Model determines how elements are structured on a page. Every HTML element is a rectangular box, defined by the following layers:</p> <ol> <li>Content: The actual text or images inside the box.</li> <li>Padding: Space between the content and the border.</li> <li>Border: The line around the padding and content.</li> <li>Margin: Space outside the border.</li> </ol>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/CSS/#example_1","title":"Example","text":"<pre><code>&lt;div class=\"box\"&gt;Hello, Box Model!&lt;/div&gt;\n</code></pre> <pre><code>.box {\n  width: 200px;\n  padding: 20px;\n  border: 5px solid #3498db;\n  margin: 15px;\n  box-sizing: border-box;\n}\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/CSS/#css-selectors","title":"\ud83e\udde9 CSS Selectors","text":"<p>Selectors are used to target HTML elements for styling.</p>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/CSS/#basic-selectors","title":"Basic Selectors","text":"<ul> <li>Element Selector: Targets all elements of a given type.   <pre><code>h1 {\n  color: green;\n}\n</code></pre></li> <li>Class Selector: Targets elements with a specific class.   <pre><code>.highlight {\n  background-color: yellow;\n}\n</code></pre></li> <li>ID Selector: Targets elements with a specific ID.   <pre><code>#header {\n  text-align: center;\n}\n</code></pre></li> </ul>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/CSS/#basic-css-properties","title":"\ud83c\udfa8 Basic CSS Properties","text":""},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/CSS/#text-properties","title":"Text Properties","text":"<ul> <li><code>color</code>: Changes the text color.</li> <li><code>font-size</code>: Sets the size of the font.</li> <li><code>text-align</code>: Aligns text.</li> </ul>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/CSS/#background-properties","title":"Background Properties","text":"<ul> <li><code>background-color</code>: Sets the background color.</li> <li><code>background-image</code>: Adds a background image.</li> </ul>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/CSS/#box-model-properties","title":"Box Model Properties","text":"<ul> <li><code>margin</code>: Space outside of an element.</li> <li><code>padding</code>: Space inside of an element.</li> <li><code>border</code>: Creates a border around an element.</li> </ul>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/CSS/#css-flexbox","title":"\ud83d\udcd0 CSS Flexbox","text":"<p>The Flexbox layout simplifies aligning elements in a container.</p>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/CSS/#example_2","title":"Example","text":"<pre><code>&lt;div class=\"flex-container\"&gt;\n  &lt;div class=\"item\"&gt;1&lt;/div&gt;\n  &lt;div class=\"item\"&gt;2&lt;/div&gt;\n  &lt;div class=\"item\"&gt;3&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>.flex-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n}\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/CSS/#key-flexbox-properties","title":"Key Flexbox Properties","text":"<ul> <li>justify-content: Aligns items horizontally (<code>flex-start</code>, <code>center</code>, <code>space-between</code>).</li> <li>align-items: Aligns items vertically (<code>stretch</code>, <code>center</code>).</li> <li>flex-direction: Defines the direction of items (<code>row</code>, <code>column</code>).</li> </ul>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/CSS/#css-grid","title":"\ud83d\uddc2\ufe0f CSS Grid","text":"<p>The CSS Grid is a powerful system for creating two-dimensional layouts.</p>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/CSS/#example_3","title":"Example","text":"<pre><code>&lt;div class=\"grid-container\"&gt;\n  &lt;div class=\"grid-item\"&gt;1&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;2&lt;/div&gt;\n  &lt;div class=\"grid-item\"&gt;3&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>.grid-container {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 20px;\n}\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/CSS/#key-grid-properties","title":"Key Grid Properties","text":"<ul> <li>grid-template-columns: Defines columns.</li> <li>gap: Space between rows and columns.</li> <li>grid-column / grid-row: Controls item placement.</li> </ul>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/CSS/#copying-pasting-css","title":"\ud83d\udccb Copying &amp; Pasting CSS","text":"<ol> <li>Open the webpage in a browser (e.g., Chrome).</li> <li>Right-click an element and select \"Inspect\".</li> <li>Copy the CSS from the Styles panel.</li> <li>Paste it into your stylesheet.</li> </ol>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/CSS/#bootstrap-css-basics","title":"\ud83c\udfa8 Bootstrap CSS Basics","text":"<p>Bootstrap is a popular CSS framework that helps you create responsive, mobile-first designs.</p>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/CSS/#getting-started","title":"\ud83d\udee0 Getting Started","text":"<p>Add Bootstrap to your HTML: <pre><code>&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\"&gt;\n</code></pre></p>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/CSS/#responsive-grid-system","title":"\ud83e\uddf1 Responsive Grid System","text":"<p>Bootstrap uses a 12-column grid system with breakpoints for different screen sizes.</p>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/CSS/#example_4","title":"Example","text":"<pre><code>&lt;div class=\"container\"&gt;\n  &lt;div class=\"row\"&gt;\n    &lt;div class=\"col-sm-4\"&gt;Column 1&lt;/div&gt;\n    &lt;div class=\"col-sm-4\"&gt;Column 2&lt;/div&gt;\n    &lt;div class=\"col-sm-4\"&gt;Column 3&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/CSS/#responsive-columns","title":"Responsive Columns","text":"<pre><code>&lt;div class=\"row\"&gt;\n  &lt;div class=\"col-12 col-md-6\"&gt;50% on medium screens&lt;/div&gt;\n  &lt;div class=\"col-12 col-md-6\"&gt;50% on medium screens&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/CSS/#bootstrap-components","title":"\ud83d\udd27 Bootstrap Components","text":""},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/CSS/#1-buttons","title":"1. Buttons","text":"<pre><code>&lt;button class=\"btn btn-primary\"&gt;Primary&lt;/button&gt;\n&lt;button class=\"btn btn-secondary\"&gt;Secondary&lt;/button&gt;\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/CSS/#2-cards","title":"2. Cards","text":"<pre><code>&lt;div class=\"card\" style=\"width: 18rem;\"&gt;\n  &lt;img src=\"image.jpg\" class=\"card-img-top\" alt=\"...\"&gt;\n  &lt;div class=\"card-body\"&gt;\n    &lt;h5 class=\"card-title\"&gt;Card Title&lt;/h5&gt;\n    &lt;p class=\"card-text\"&gt;Some text here.&lt;/p&gt;\n    &lt;a href=\"#\" class=\"btn btn-primary\"&gt;Go somewhere&lt;/a&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/CSS/#3-navbar","title":"3. Navbar","text":"<pre><code>&lt;nav class=\"navbar navbar-expand-lg navbar-light bg-light\"&gt;\n  &lt;a class=\"navbar-brand\" href=\"#\"&gt;Brand&lt;/a&gt;\n  &lt;button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\"&gt;\n    &lt;span class=\"navbar-toggler-icon\"&gt;&lt;/span&gt;\n  &lt;/button&gt;\n  &lt;div class=\"collapse navbar-collapse\" id=\"navbarNav\"&gt;\n    &lt;ul class=\"navbar-nav\"&gt;\n      &lt;li class=\"nav-item\"&gt;&lt;a class=\"nav-link\" href=\"#\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n      &lt;li class=\"nav-item\"&gt;&lt;a class=\"nav-link\" href=\"#\"&gt;About&lt;/a&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n&lt;/nav&gt;\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/CSS/#conclusion","title":"\ud83c\udfc1 Conclusion","text":"<p>Congratulations! You've learned the basics of CSS, Flexbox, Grid, and Bootstrap. Keep experimenting with these tools to create responsive, modern web designs. Happy coding! \ud83d\ude80</p>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/HTML/","title":"Introduction to HTML","text":""},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/HTML/#table-of-contents","title":"Table of Contents","text":"<ol> <li>What is HTML?</li> <li>Basic Structure of an HTML Document</li> <li>HTML Elements</li> <li>HTML Tags</li> <li>Common HTML Elements</li> <li>Headings</li> <li>Paragraphs</li> <li>Links</li> <li>Images</li> <li>Lists</li> <li>Attributes in HTML</li> <li>HTML Forms</li> <li>HTML Comments</li> <li>Semantic HTML</li> <li>Conclusion</li> </ol>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/HTML/#what-is-html","title":"What is HTML?","text":"<p>HTML (HyperText Markup Language) is the standard markup language used to create web pages. It defines the structure of a web page using a series of elements and tags. HTML forms the foundation of most web content, allowing text, images, links, and multimedia to be structured and displayed in web browsers.</p>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/HTML/#basic-structure-of-an-html-document","title":"Basic Structure of an HTML Document","text":"<p>Here\u2019s a simple example of an HTML document:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;My First HTML Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Welcome to HTML&lt;/h1&gt;\n    &lt;p&gt;This is a simple HTML document.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/HTML/#explanation","title":"Explanation","text":"<ul> <li><code>&lt;!DOCTYPE html&gt;</code>: Specifies the HTML version (HTML5).</li> <li><code>&lt;html&gt;</code>: The root element of an HTML page.</li> <li><code>&lt;head&gt;</code>: Contains meta-information like title, character set, and more.</li> <li><code>&lt;title&gt;</code>: The title displayed on the browser tab.</li> <li><code>&lt;body&gt;</code>: The main content of the webpage.</li> </ul>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/HTML/#html-elements","title":"HTML Elements","text":"<p>An HTML element usually consists of: 1. Opening tag: <code>&lt;tag&gt;</code> 2. Content: The information inside the tag. 3. Closing tag: <code>&lt;/tag&gt;</code></p> <p>Example: <pre><code>&lt;p&gt;Hello, World!&lt;/p&gt;\n</code></pre></p>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/HTML/#self-closing-tags","title":"Self-Closing Tags","text":"<p>Some HTML elements do not have closing tags: <pre><code>&lt;img src=\"logo.png\" alt=\"Logo\"&gt;\n&lt;br&gt;\n</code></pre></p>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/HTML/#html-tags","title":"HTML Tags","text":"<p>HTML tags are used to define elements on a web page. They are usually enclosed within angle brackets (<code>&lt;</code> and <code>&gt;</code>). Tags are not case-sensitive, but it's a best practice to write them in lowercase.</p>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/HTML/#common-html-elements","title":"Common HTML Elements","text":""},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/HTML/#headings","title":"Headings","text":"<p>Headings are defined with <code>&lt;h1&gt;</code> to <code>&lt;h6&gt;</code> tags, with <code>&lt;h1&gt;</code> being the highest level and <code>&lt;h6&gt;</code> the lowest.</p> <pre><code>&lt;h1&gt;Main Heading&lt;/h1&gt;\n&lt;h2&gt;Sub-heading&lt;/h2&gt;\n&lt;h3&gt;Section Heading&lt;/h3&gt;\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/HTML/#paragraphs","title":"Paragraphs","text":"<p>Paragraphs are defined using the <code>&lt;p&gt;</code> tag.</p> <pre><code>&lt;p&gt;This is a paragraph.&lt;/p&gt;\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/HTML/#links","title":"Links","text":"<p>To create a hyperlink, use the <code>&lt;a&gt;</code> tag:</p> <pre><code>&lt;a href=\"https://example.com\" target=\"_blank\"&gt;Visit Example&lt;/a&gt;\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/HTML/#images","title":"Images","text":"<p>To include images, use the <code>&lt;img&gt;</code> tag:</p> <pre><code>&lt;img src=\"image.jpg\" alt=\"Description of the image\" width=\"400\"&gt;\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/HTML/#lists","title":"Lists","text":""},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/HTML/#unordered-lists","title":"Unordered Lists","text":"<pre><code>&lt;ul&gt;\n    &lt;li&gt;Apple&lt;/li&gt;\n    &lt;li&gt;Banana&lt;/li&gt;\n    &lt;li&gt;Cherry&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/HTML/#ordered-lists","title":"Ordered Lists","text":"<pre><code>&lt;ol&gt;\n    &lt;li&gt;First item&lt;/li&gt;\n    &lt;li&gt;Second item&lt;/li&gt;\n    &lt;li&gt;Third item&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/HTML/#attributes-in-html","title":"Attributes in HTML","text":"<p>Attributes provide additional information about HTML elements. They are placed inside the opening tag.</p> <p>Example: <pre><code>&lt;a href=\"https://example.com\" target=\"_blank\" title=\"Example Site\"&gt;Click Here&lt;/a&gt;\n</code></pre></p>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/HTML/#common-attributes","title":"Common Attributes","text":"<ul> <li><code>href</code>: URL for links</li> <li><code>src</code>: Source file for images and videos</li> <li><code>alt</code>: Alternative text for images</li> <li><code>id</code>: Unique identifier for an element</li> <li><code>class</code>: Class name for styling multiple elements</li> <li><code>style</code>: Inline CSS for styling</li> </ul>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/HTML/#html-forms","title":"HTML Forms","text":"<p>Forms collect user input and send it to a server for processing.</p> <pre><code>&lt;form action=\"/submit\" method=\"POST\"&gt;\n    &lt;label for=\"name\"&gt;Name:&lt;/label&gt;\n    &lt;input type=\"text\" id=\"name\" name=\"name\" required&gt;\n\n    &lt;label for=\"email\"&gt;Email:&lt;/label&gt;\n    &lt;input type=\"email\" id=\"email\" name=\"email\"&gt;\n\n    &lt;input type=\"submit\" value=\"Submit\"&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/HTML/#explanation_1","title":"Explanation","text":"<ul> <li><code>&lt;form&gt;</code>: The form container.</li> <li><code>action</code>: URL where form data is sent.</li> <li><code>method</code>: HTTP method (GET, POST).</li> <li><code>&lt;input&gt;</code>: Collects user data.</li> <li><code>&lt;label&gt;</code>: Label for form fields.</li> </ul>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/HTML/#html-comments","title":"HTML Comments","text":"<p>Comments in HTML are added using <code>&lt;!-- --&gt;</code>. They are not visible to users but help developers understand the code.</p> <pre><code>&lt;!-- This is a comment --&gt;\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/HTML/#semantic-html","title":"Semantic HTML","text":"<p>Semantic HTML uses meaningful tags to improve accessibility and SEO. Examples include:</p> <pre><code>&lt;header&gt;Website Header&lt;/header&gt;\n&lt;nav&gt;Navigation Links&lt;/nav&gt;\n&lt;main&gt;Main Content Area&lt;/main&gt;\n&lt;footer&gt;Website Footer&lt;/footer&gt;\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/HTML/#non-semantic-vs-semantic","title":"Non-Semantic vs. Semantic","text":"<pre><code>&lt;!-- Non-semantic --&gt;\n&lt;div id=\"header\"&gt;Header&lt;/div&gt;\n\n&lt;!-- Semantic --&gt;\n&lt;header&gt;Header&lt;/header&gt;\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/HTML/#conclusion","title":"Conclusion","text":"<p>HTML is the backbone of web development, forming the structure of web pages. By mastering HTML, you can start building your own websites and web applications. Combine HTML with CSS and JavaScript to create dynamic, responsive, and interactive content.</p> <p>Happy coding! \ud83d\ude80</p>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/JS/","title":"Introduction to JavaScript Programming","text":""},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/JS/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Introduction</li> <li>Getting Started with JavaScript</li> <li>Variables and Data Types</li> <li>Operators</li> <li>Control Structures</li> <li>Functions</li> <li>Objects and Arrays</li> <li>DOM Manipulation</li> <li>Events</li> <li>Basic Error Handling</li> <li>Running Javascript Code In Browser Console </li> <li>Conclusion</li> </ol>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/JS/#1-introduction","title":"1. Introduction","text":"<p>JavaScript is a programming language primarily used to add interactivity and dynamic behavior to websites. Alongside HTML and CSS, JavaScript is one of the essential technologies in web development. It can be used for various tasks, including handling events, manipulating HTML and CSS, performing calculations, and even building entire applications.</p>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/JS/#2-getting-started-with-javascript","title":"2. Getting Started with JavaScript","text":"<p>JavaScript can be written inside HTML files or in separate <code>.js</code> files.</p>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/JS/#inline-javascript-in-html","title":"Inline JavaScript in HTML","text":"<p>You can write JavaScript directly in an HTML document within <code>&lt;script&gt;</code> tags:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;JavaScript Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Welcome to JavaScript&lt;/h1&gt;\n    &lt;script&gt;\n      alert(\"Hello, World!\");\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/JS/#external-javascript-file","title":"External JavaScript File","text":"<p>To keep your code organized, you can create a separate JavaScript file and link it to an HTML document:</p> <ol> <li>Create a file named <code>script.js</code> and add JavaScript code inside.</li> <li>Link it in the HTML file using <code>&lt;script src=\"script.js\"&gt;&lt;/script&gt;</code>.</li> </ol> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;JavaScript Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Welcome to JavaScript&lt;/h1&gt;\n    &lt;script src=\"script.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/JS/#3-variables-and-data-types","title":"3. Variables and Data Types","text":"<p>In JavaScript, variables are used to store information. You can create variables using <code>let</code>, <code>const</code>, or <code>var</code>.</p>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/JS/#declaring-variables","title":"Declaring Variables","text":"<ul> <li><code>let</code> and <code>const</code> are commonly used.</li> <li><code>let</code> is used for variables that can change.</li> <li><code>const</code> is used for variables that will not change.</li> </ul> <pre><code>let name = \"Alice\"; // String\nconst age = 25; // Number\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/JS/#data-types","title":"Data Types","text":"<p>JavaScript has several basic data types:</p> <ol> <li>String: Text values, written inside quotes (single or double).    <pre><code>let greeting = \"Hello, World!\";\n</code></pre></li> <li>Number: Represents numeric values.    <pre><code>let score = 99.5;\n</code></pre></li> <li>Boolean: Represents <code>true</code> or <code>false</code> values.    <pre><code>let isStudent = true;\n</code></pre></li> <li>Object: Used to store multiple values as key-value pairs.    <pre><code>let person = { name: \"Alice\", age: 25 };\n</code></pre></li> <li>Array: Stores multiple values in an ordered list.    <pre><code>let colors = [\"red\", \"green\", \"blue\"];\n</code></pre></li> </ol>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/JS/#variable-naming-rules","title":"Variable Naming Rules","text":"<ul> <li>Names can contain letters, numbers, underscores, and dollar signs (<code>$</code>).</li> <li>Must begin with a letter, <code>$</code>, or <code>_</code>.</li> <li>JavaScript is case-sensitive, so <code>myVariable</code> and <code>MyVariable</code> are different.</li> </ul>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/JS/#4-operators","title":"4. Operators","text":"<p>Operators perform operations on variables and values.</p>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/JS/#arithmetic-operators","title":"Arithmetic Operators","text":"<p>Used to perform mathematical calculations:</p> <pre><code>let x = 10;\nlet y = 5;\nconsole.log(x + y); // Output: 15\nconsole.log(x - y); // Output: 5\nconsole.log(x * y); // Output: 50\nconsole.log(x / y); // Output: 2\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/JS/#assignment-operators","title":"Assignment Operators","text":"<p>Assign values to variables:</p> <pre><code>let z = 10;\nz += 5; // z = z + 5; Now z is 15\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/JS/#comparison-operators","title":"Comparison Operators","text":"<p>Compare values and return a boolean (<code>true</code> or <code>false</code>):</p> <pre><code>console.log(10 &gt; 5); // true\nconsole.log(10 === \"10\"); // false (strict equality)\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/JS/#logical-operators","title":"Logical Operators","text":"<p>Combine conditions:</p> <ul> <li><code>&amp;&amp;</code> (AND): Both conditions must be true.</li> <li><code>||</code> (OR): At least one condition must be true.</li> <li><code>!</code> (NOT): Reverses the condition.</li> </ul> <pre><code>let a = true;\nlet b = false;\nconsole.log(a &amp;&amp; b); // false\nconsole.log(a || b); // true\nconsole.log(!a); // false\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/JS/#5-control-structures","title":"5. Control Structures","text":"<p>Control structures determine the flow of code.</p>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/JS/#if-else-statements","title":"If-Else Statements","text":"<pre><code>let age = 18;\nif (age &gt;= 18) {\n  console.log(\"You are an adult.\");\n} else {\n  console.log(\"You are a minor.\");\n}\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/JS/#loops","title":"Loops","text":""},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/JS/#for-loop","title":"For Loop","text":"<pre><code>for (let i = 0; i &lt; 5; i++) {\n  console.log(i);\n}\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/JS/#while-loop","title":"While Loop","text":"<pre><code>let i = 0;\nwhile (i &lt; 5) {\n  console.log(i);\n  i++;\n}\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/JS/#6-functions","title":"6. Functions","text":"<p>Functions let you reuse code blocks.</p>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/JS/#defining-functions","title":"Defining Functions","text":"<pre><code>function greet(name) {\n  return \"Hello, \" + name + \"!\";\n}\nconsole.log(greet(\"Alice\"));\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/JS/#arrow-functions-es6","title":"Arrow Functions (ES6)","text":"<p>A shorter way to define functions:</p> <pre><code>const greet = (name) =&gt; \"Hello, \" + name + \"!\";\nconsole.log(greet(\"Alice\"));\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/JS/#7-objects-and-arrays","title":"7. Objects and Arrays","text":"<p>JavaScript has versatile data structures like Objects and Arrays.</p>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/JS/#objects","title":"Objects","text":"<pre><code>let car = {\n  make: \"Toyota\",\n  model: \"Camry\",\n  year: 2020,\n};\nconsole.log(car.make); // Output: Toyota\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/JS/#arrays","title":"Arrays","text":"<pre><code>let fruits = [\"apple\", \"banana\", \"cherry\"];\nconsole.log(fruits[1]); // Output: banana\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/JS/#8-dom-manipulation","title":"8. DOM Manipulation","text":"<p>JavaScript can interact with HTML elements.</p>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/JS/#accessing-elements","title":"Accessing Elements","text":"<pre><code>&lt;p id=\"text\"&gt;Hello&lt;/p&gt;\n&lt;button onclick=\"changeText()\"&gt;Click Me&lt;/button&gt;\n\n&lt;script&gt;\n  function changeText() {\n    document.getElementById(\"text\").innerHTML = \"Hello, World!\";\n  }\n&lt;/script&gt;\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/JS/#9-events","title":"9. Events","text":"<p>JavaScript can respond to user actions like clicks.</p> <pre><code>&lt;button onclick=\"alert('Button clicked!')\"&gt;Click Me&lt;/button&gt;\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/JS/#10-basic-error-handling","title":"10. Basic Error Handling","text":"<p>Errors are common, and JavaScript provides ways to handle them.</p>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/JS/#try-catch","title":"Try-Catch","text":"<pre><code>try {\n  console.log(x); // x is not defined\n} catch (error) {\n  console.error(\"An error occurred:\", error);\n}\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/JS/#11-running-javascript-in-the-browser-console","title":"11. Running JavaScript in the Browser Console","text":"<p>One of the easiest ways to test JavaScript code is by using the browser's console. All modern browsers have a console built-in that lets you execute JavaScript in real-time.</p>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/JS/#steps-to-open-the-console","title":"Steps to Open the Console","text":"<ol> <li> <p>In Google Chrome:</p> </li> <li> <p>Right-click on the page and select Inspect or press <code>Ctrl+Shift+J</code> (Windows) or <code>Cmd+Option+J</code> (Mac) to open the Developer Tools.</p> </li> <li> <p>Go to the Console tab.</p> </li> <li> <p>In Firefox:</p> </li> <li> <p>Right-click on the page and select Inspect Element or press <code>Ctrl+Shift+K</code> (Windows) or <code>Cmd+Option+K</code> (Mac) to open the Developer Tools.</p> </li> <li> <p>Navigate to the Console tab.</p> </li> <li> <p>In Microsoft Edge:</p> </li> <li> <p>Right-click on the page and select Inspect or press <code>F12</code> to open the Developer Tools.</p> </li> <li> <p>Click on the Console tab.</p> </li> <li> <p>In Safari:</p> </li> <li>Go to Safari &gt; Preferences. In the Advanced tab, check Show Develop menu in menu bar.</li> <li>Right-click on the page and select Inspect Element or press <code>Cmd+Option+C</code> to open Developer Tools and go to the Console tab.</li> </ol>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/JS/#running-code-in-the-console","title":"Running Code in the Console","text":"<p>Once the console is open, you can type JavaScript code directly and press <code>Enter</code> to execute it. For example:</p> <pre><code>console.log(\"Hello from the Console!\");\n</code></pre> <p>The output will appear immediately in the console. This is a great way to quickly test code snippets and see the results without needing to refresh a page.</p>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/JS/#example-simple-calculation","title":"Example: Simple Calculation","text":"<p>You can use the console for quick calculations or to test functions:</p> <pre><code>let x = 10;\nlet y = 20;\nconsole.log(x + y); // Output: 30\n</code></pre> <p>The console is an invaluable tool for debugging and testing JavaScript code in a live environment.</p>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/JS/#12-conclusion","title":"12. Conclusion","text":"<p>JavaScript is powerful for web development. This guide covers the essentials, so keep practicing, explore advanced topics, and refer to documentation as you grow your skills!</p>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/src/Final%20Code/","title":"A Simple Counter Application","text":""},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/src/Final%20Code/#htmlcss","title":"HTML/CSS:","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Basketball Score&lt;/title&gt;\n  &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\"\n    integrity=\"sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH\" crossorigin=\"anonymous\"&gt;\n  &lt;style&gt;\n    .counter-display {\n      font-size: 2rem;\n      margin: 20px 0;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;div class=\"container text-center\"&gt;\n    &lt;h1 class=\"my-4\"&gt;\ud83c\udfc0 Basketball Score&lt;/h1&gt;\n\n    &lt;!-- Counter Display --&gt;\n    &lt;div id=\"counter\" class=\"counter-display\"&gt;0&lt;/div&gt;\n\n    &lt;!-- Buttons --&gt;\n    &lt;div class=\"d-flex justify-content-center gap-3\"&gt;\n      &lt;button id=\"increase-2\" class=\"btn btn-success\"&gt;2 Pointer&lt;/button&gt;\n      &lt;button id=\"increase-3\" class=\"btn btn-success\"&gt;3 Pointer&lt;/button&gt;\n      &lt;button id=\"decrease\" class=\"btn btn-danger\"&gt;Decrease&lt;/button&gt;\n      &lt;button id=\"reset\" class=\"btn btn-secondary\"&gt;Reset&lt;/button&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n\n  &lt;!-- JavaScript --&gt;\n  &lt;script src=\"script.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>"},{"location":"Week%202%3A%20HTML%20CSS%20JS%20%28Frontend%29/src/Final%20Code/#javascript","title":"JavaScript:","text":"<pre><code>// Initialize the counter variable\nlet count = 0;\n\n// Select the display element\nconst counterDisplay = document.getElementById(\"counter\");\n\n// Function to update the display\nfunction updateDisplay() {\n  counterDisplay.innerText = count;\n}\n\n// Increase count\ndocument.getElementById(\"increase-2\").addEventListener(\"click\", () =&gt; {\n  count += 2;\n  updateDisplay();\n});\n\n// Increase count\ndocument.getElementById(\"increase-3\").addEventListener(\"click\", () =&gt; {\n  count += 3;\n  updateDisplay();\n});\n\n// Decrease count\ndocument.getElementById(\"decrease\").addEventListener(\"click\", () =&gt; {\n  count--;\n  updateDisplay();\n});\n\n// Reset count\ndocument.getElementById(\"reset\").addEventListener(\"click\", () =&gt; {\n  count = 0;\n  updateDisplay();\n});\n</code></pre>"},{"location":"Week%203%3A%20Final%20Project%20Development/","title":"A Full Stack Portfolio Website","text":"<p>In this workshop, we'll be building a simple portfolio website with Flask and a MySQL database. We'll cover everything from setup to integrating the database and creating a user-friendly front end with Bootstrap.</p>"},{"location":"Week%203%3A%20Final%20Project%20Development/#introduction-to-front-end-and-back-end","title":"Introduction to Front-End and Back-End","text":"<p>Before diving into building the project, it's crucial to understand the foundational concepts of web development:</p> <ul> <li>Front-End (Client-Side): This is the part of the application that users interact with directly. It includes everything a user experiences on the browser, such as HTML (structure), CSS (styling), and JavaScript (functionality).</li> <li>Back-End (Server-Side): This is the behind-the-scenes functionality of the application. It handles data processing, server communication, database management, and more. Back-end code is run on the server and interacts with the front-end via HTTP methods like GET (fetch data) and POST (send data).</li> <li>Full Stack Development: This refers to working on both the front-end and back-end, providing a complete, well-rounded skill set for building web applications.</li> </ul> <p> </p>"},{"location":"Week%203%3A%20Final%20Project%20Development/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Python installed (version 3.7+ recommended)</p> </li> <li> <p>Download A Nice Blue Mountain </p> </li> </ul>"},{"location":"Week%203%3A%20Final%20Project%20Development/#1-project-setup","title":"1. Project Setup","text":""},{"location":"Week%203%3A%20Final%20Project%20Development/#11-setting-up-a-virtual-environment","title":"1.1 Setting up a Virtual Environment","text":"<p>To ensure we have an isolated workspace, let's create and activate a virtual environment. Open CMD and type </p> <pre><code>python3 -m venv myenv\n</code></pre> <p>after this we can activate our environment by typing out</p> <pre><code>myenv\\Scripts\\activate &lt;for windows&gt;\n\nOR \n\nsource myenv/bin/activate &lt;for Mac/Linux&gt;\n</code></pre>"},{"location":"Week%203%3A%20Final%20Project%20Development/#12-installing-flask-and-dependencies","title":"1.2 Installing Flask and Dependencies","text":"<p>With the virtual environment activated, install Flask and other dependencies.</p> <pre><code>pip install Flask\npip install Flask-SQLAlchemy\n</code></pre>"},{"location":"Week%203%3A%20Final%20Project%20Development/#2-building-the-basic-front-end-layout","title":"2. Building the Basic Front-End Layout","text":"<p>To start, we will focus on building the initial structure of the front-end using HTML and CSS. This section will guide you through understanding the provided <code>index.html</code> and <code>style.css</code> files.\u00a0\u00a0\u00a0\u00a0</p> <pre><code>portfolio/\n\u251c\u2500\u2500 app/\n\u2502   \u251c\u2500\u2500 templates/\n\u2502   \u2502   \u2514\u2500\u2500 index.html\n\u2502   \u2514\u2500\u2500 static/\n\u2502       \u2514\u2500\u2500 css/\n\u2502           \u2514\u2500\u2500 style.css\n\u251c\u2500\u2500 run.py\n</code></pre> <p><code>run.py</code>: This will initialize and run the Flask app.</p> <pre><code>from flask import Flask, render_template\n\n# Initialize the Flask app\napp = Flask(__name__, static_folder='app/static', template_folder='app/templates')\n\n# Route for the homepage\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> <p>Let us start of by creating the <code>index.html</code> for our portfolio website followed by the <code>style.css</code> and run the app to see what we have</p>"},{"location":"Week%203%3A%20Final%20Project%20Development/#the-html-file-indexhtml","title":"The HTML File (<code>index.html</code>)","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;My Portfolio&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/style.css') }}\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;!-- Header with Navigation Links --&gt;\n    &lt;header class=\"header\"&gt;\n        &lt;a href=\"#home\" class=\"logo\"&gt;My Portfolio&lt;/a&gt;\n        &lt;nav class=\"nav-links\"&gt;\n            &lt;a href=\"#home\"&gt;Home&lt;/a&gt;\n            &lt;a href=\"#about\"&gt;About Me&lt;/a&gt;\n        &lt;/nav&gt;\n    &lt;/header&gt;\n\n    &lt;!-- Home Section --&gt;\n    &lt;section id=\"home\" class=\"section red-section\"&gt;\n        &lt;div class=\"content\"&gt;\n            &lt;h1 class=\"main-text\"&gt;Mustafa Fatehi&lt;/h1&gt;\n            &lt;p&gt;Welcome to my personal portfolio!&lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/section&gt;\n\n    &lt;!-- About Section --&gt;\n    &lt;section id=\"about\" class=\"section white-section\"&gt;\n        &lt;div class=\"content\"&gt;\n            &lt;h1&gt;About Me&lt;/h1&gt;\n            &lt;p&gt;Hello! I'm Mustafa, a web developer experienced in Flask, Python, and front-end technologies.&lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/section&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Week%203%3A%20Final%20Project%20Development/#explanation-of-the-html-structure","title":"Explanation of the HTML Structure","text":"<ul> <li><code>&lt;!DOCTYPE html&gt;</code>: Declares the document type and version of HTML (HTML5 in this case).</li> <li><code>&lt;html lang=\"en\"&gt;</code>: The root element of the HTML document, with <code>lang=\"en\"</code> specifying the language as English.</li> <li><code>&lt;head&gt;</code>: Contains meta-information about the document, such as character encoding, viewport settings for responsive design, title, and linked resources (like CSS).</li> <li><code>&lt;link rel=\"stylesheet\"&gt;</code>: Links to the <code>style.css</code> file using <code>url_for()</code> to serve the static file.</li> <li><code>&lt;body&gt;</code>: Contains the main content of the web page.</li> <li><code>&lt;header&gt;</code>: A container for introductory content and navigation links.</li> <li><code>&lt;a&gt;</code>: An anchor element used for navigation; it can link to sections within the page or external pages.</li> <li><code>&lt;section&gt;</code>: Defines sections in a document, used to group thematic content.</li> <li><code>&lt;div&gt;</code>: A generic container element that can be used to group content for styling or layout purposes.</li> <li><code>&lt;h1&gt;</code> and <code>&lt;p&gt;</code>: Header and paragraph tags, respectively, used for headings and regular text.</li> </ul>"},{"location":"Week%203%3A%20Final%20Project%20Development/#detailed-explanation-of-the-header-section","title":"Detailed Explanation of the Header Section","text":"<pre><code>&lt;header class=\"header\"&gt;\n    &lt;a href=\"#home\" class=\"logo\"&gt;My Portfolio&lt;/a&gt;\n    &lt;nav class=\"nav-links\"&gt;\n        &lt;a href=\"#home\"&gt;Home&lt;/a&gt;\n        &lt;a href=\"#about\"&gt;About Me&lt;/a&gt;\n    &lt;/nav&gt;\n&lt;/header&gt;\n</code></pre>"},{"location":"Week%203%3A%20Final%20Project%20Development/#1-header-classheader","title":"1. <code>&lt;header class=\"header\"&gt;</code>:","text":"<ul> <li>The <code>&lt;header&gt;</code> element is used to group introductory content, navigation links, or other elements that appear at the beginning of a web page or a section.</li> <li>The <code>class=\"header\"</code> assigns a CSS class to the <code>&lt;header&gt;</code> element, allowing it to be styled specifically through the CSS rules associated with <code>.header</code>.</li> </ul>"},{"location":"Week%203%3A%20Final%20Project%20Development/#2-a-hrefhome-classlogomy-portfolioa","title":"2. <code>&lt;a href=\"#home\" class=\"logo\"&gt;My Portfolio&lt;/a&gt;</code>:","text":"<ul> <li><code>&lt;a&gt;</code> (Anchor tag): This tag is used for hyperlinks. It can navigate to another page, a different section within the same page, or an external site.</li> <li><code>href=\"#home\"</code>: The <code>href</code> attribute sets the link's destination. In this case, <code>#home</code> is an internal link that points to an element with the <code>id=\"home\"</code> on the same page, facilitating smooth scrolling navigation.</li> <li><code>class=\"logo\"</code>: This assigns a CSS class <code>logo</code> to the anchor tag, which can be styled separately to create a distinct appearance (e.g., different font size or color).</li> <li>Content (\"My Portfolio\"): This is the clickable text displayed as the link, often styled prominently to act as a branding or main title link.</li> </ul>"},{"location":"Week%203%3A%20Final%20Project%20Development/#3-nav-classnav-links","title":"3. <code>&lt;nav class=\"nav-links\"&gt;</code>:","text":"<ul> <li>The <code>&lt;nav&gt;</code> element is a semantic HTML5 tag that represents a section of the page intended for navigation links. It helps screen readers and search engines understand that the contained links are for navigating the site.</li> <li><code>class=\"nav-links\"</code>: This class allows specific CSS styling to be applied to the entire <code>&lt;nav&gt;</code> block or individual child elements within it.</li> </ul>"},{"location":"Week%203%3A%20Final%20Project%20Development/#4-navigation-links-a-elements-inside-nav","title":"4. Navigation Links (<code>&lt;a&gt;</code> elements inside <code>&lt;nav&gt;</code>):","text":"<ul> <li><code>&lt;a href=\"#home\"&gt;Home&lt;/a&gt;</code> and <code>&lt;a href=\"#about\"&gt;About Me&lt;/a&gt;</code>: These are the anchor tags within the <code>&lt;nav&gt;</code> element that act as clickable navigation items.</li> <li><code>href=\"#home\"</code> and <code>href=\"#about\"</code> specify that these links will scroll to the elements with <code>id=\"home\"</code> and <code>id=\"about\"</code> on the current page.</li> <li>The visible text (\"Home\" and \"About Me\") is what users will see and click on.</li> </ul>"},{"location":"Week%203%3A%20Final%20Project%20Development/#the-css-file-stylecss","title":"The CSS File (<code>style.css</code>)","text":"<pre><code>body {\n    font-family: 'Arial', sans-serif;\n    margin: 0;\n    padding: 0;\n}\n\n.header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 1rem;\n    background-color: #333;\n    color: #fff;\n}\n\n.header .logo {\n    font-size: 1.5rem;\n    text-decoration: none;\n    color: #fff;\n}\n\n.header .nav-links a {\n    margin-left: 1rem;\n    text-decoration: none;\n    color: #fff;\n}\n\n.section {\n    padding: 2rem;\n    text-align: center;\n}\n\n.red-section {\n    background-color: #f44336;\n    color: #fff;\n}\n\n.white-section {\n    background-color: #fff;\n    color: #333;\n}\n\n.content h1 {\n    margin-bottom: 1rem;\n    font-size: 2.5rem;\n}\n\n.content p {\n    font-size: 1.2rem;\n}\n</code></pre>"},{"location":"Week%203%3A%20Final%20Project%20Development/#explanation-of-the-css-file","title":"Explanation of the CSS File","text":"<ul> <li><code>body</code>: Defines the base styles for the entire document, setting the font family and removing default margins and padding for a clean slate.</li> <li><code>.header</code>: Targets the <code>&lt;header&gt;</code> element. The <code>display: flex</code> property allows items inside to be aligned horizontally, with <code>justify-content: space-between</code> distributing them evenly and <code>align-items: center</code> aligning them vertically.</li> <li>Color Properties:</li> <li><code>background-color: #333</code>: Sets the background color to a dark shade (for the header).</li> <li><code>color: #fff</code>: Sets the text color to white.</li> <li>Class Selectors:</li> <li><code>.logo</code> and <code>.nav-links a</code>: Custom styling for elements within the header, specifying text properties like color and margin.</li> <li><code>.section</code>: Applies padding and center-alignment to all sections.</li> <li><code>.red-section</code> and <code>.white-section</code>: Adds specific background colors and text colors to the <code>home</code> and <code>about</code> sections for visual differentiation.</li> <li>Nested Selectors:</li> <li><code>.header .nav-links a</code>: This ensures only anchor tags within <code>.nav-links</code> receive specific styling.</li> <li>Typography:</li> <li><code>h1</code> and <code>p</code> styles: Adjustments for heading and paragraph elements within <code>.content</code> to enhance readability and spacing.</li> </ul>"},{"location":"Week%203%3A%20Final%20Project%20Development/#how-css-selectors-work","title":"How CSS Selectors Work","text":"<ul> <li>Class Selector (<code>.header</code>): Targets elements with the class <code>header</code>.</li> <li>Descendant Selector (<code>.header .logo</code>): Selects elements with the class <code>logo</code> that are descendants of <code>.header</code>.</li> <li>Element Selector (<code>h1</code>, <code>p</code>): Targets <code>&lt;h1&gt;</code> and <code>&lt;p&gt;</code> elements directly, applying specified styles to them.</li> </ul>"},{"location":"Week%203%3A%20Final%20Project%20Development/#how-the-css-applies-to-html-elements","title":"How the CSS Applies to HTML Elements","text":"<p>CSS is applied based on selectors that match the HTML elements:</p> <ul> <li>For example, <code>.header</code> in <code>style.css</code> matches <code>&lt;header class=\"header\"&gt;</code> in <code>index.html</code>, applying all the specified properties to that element.</li> <li>Nested rules, like <code>.header .nav-links a</code>, style anchor tags only when they are within the <code>.nav-links</code> class inside <code>.header</code>.</li> </ul>"},{"location":"Week%203%3A%20Final%20Project%20Development/#once-you-run-the-flask-app-again-this-time-you-will-see-a-much-better-looking-setup-comapred-to-before-we-now-have-color-coded-the-sections-and-overall-it-looks-like-there-is-some-structure-to-it-but-there-can-be-a-lot-of-work-done-so-let-us-make-this-look-a-bit-more-aesthetic","title":"Once you run the flask app again , this time you will see a much better looking setup comapred to before , we now have color coded the sections and overall it looks like there is some structure to it but there can be a lot of work done so let us make this look a bit more aesthetic.","text":"<p>Refer to the Bootstrap Documentation</p>"},{"location":"Week%203%3A%20Final%20Project%20Development/#lets-start-of-by-making-a-few-changes-to-our-indexhtml","title":"Let's start of by making a few changes to our <code>index.html</code>","text":"<ul> <li>Changing the fonts : you can add these lines at the start to custom import the font and the bootstrap element for styling</li> </ul> <pre><code>.\n.\n.\n&lt;title&gt;My Portfolio&lt;/title&gt;\n&lt;!-- Link to Bootstrap for base styling --&gt;\n  &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" integrity=\"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin=\"anonymous\"&gt;\n&lt;!-- Custom font --&gt;\n&lt;link href=\"https://fonts.googleapis.com/css2?family=Orbitron:wght@500&amp;display=swap\" rel=\"stylesheet\"&gt;&lt;!-- Custom CSS --&gt;\n&lt;link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/style.css') }}\"&gt;\n.\n.\n.\n</code></pre> <ul> <li>Adding a Contact section :  We can add one more section called contact section as such hyper referencing the links to our socials for faster understanding , add this after the <code>white-section</code></li> </ul> <pre><code>&lt;section id=\"contact\" class=\"contact-section\"&gt;\n    &lt;div class=\"content\"&gt;\n        &lt;h2&gt;Contact&lt;/h2&gt;\n        &lt;p&gt;Phone: &lt;a href=\"tel:+1234567890\"&gt;+1234567890&lt;/a&gt;&lt;/p&gt;\n        &lt;p&gt;Email: &lt;a href=\"mailto:your.email@example.com\"&gt;your.email@example.com&lt;/a&gt;&lt;/p&gt;\n        &lt;div class=\"social-links\"&gt;\n            &lt;a href=\"https://linkedin.com/in/yourusername\" target=\"_blank\"&gt;LinkedIn&lt;/a&gt;\n            &lt;span&gt; | &lt;/span&gt;\n            &lt;a href=\"https://instagram.com/yourusername\" target=\"_blank\"&gt;Instagram&lt;/a&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/section&gt;\n</code></pre> <p>After all these changes our current <code>index.html</code> should look like</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;My Portfolio&lt;/title&gt;\n    &lt;!-- Link to Bootstrap for base styling --&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" integrity=\"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin=\"anonymous\"&gt;\n    &lt;!-- Custom font --&gt;\n    &lt;link href=\"https://fonts.googleapis.com/css2?family=Orbitron:wght@500&amp;display=swap\" rel=\"stylesheet\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/style.css') }}\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header class=\"header\"&gt;\n        &lt;a href=\"#home\" class=\"logo\"&gt;My Portfolio&lt;/a&gt;\n        &lt;nav class=\"nav-links\"&gt;\n            &lt;a href=\"#home\"&gt;Home&lt;/a&gt;\n            &lt;a href=\"#about\"&gt;About Me&lt;/a&gt;\n            &lt;a href=\"#contact\"&gt;Contact&lt;/a&gt;\n        &lt;/nav&gt;\n    &lt;/header&gt;\n\n    &lt;main&gt;\n        &lt;section id=\"home\" class=\"section red-section\"&gt;\n            &lt;div class=\"content\"&gt;\n                &lt;h1 class=\"main-text\"&gt;Mustafa Fatehi&lt;/h1&gt;\n                &lt;p&gt;Welcome to my portfolio! I am excited to share my work with you.&lt;/p&gt;\n            &lt;/div&gt;\n        &lt;/section&gt;\n\n        &lt;section id=\"about\" class=\"section white-section\"&gt;\n            &lt;div class=\"content\"&gt;\n                &lt;h1&gt;About Me&lt;/h1&gt;\n                &lt;p&gt;Hello! I'm Mustafa, a web developer experienced in Flask, Python, and front-end technologies. I create responsive, user-friendly web applications.&lt;/p&gt;\n            &lt;/div&gt;\n        &lt;/section&gt;\n\n        &lt;!-- Contact Section --&gt;\n        &lt;section id=\"contact\" class=\"contact-section\"&gt;\n            &lt;div class=\"content\"&gt;\n                &lt;h2&gt;Contact&lt;/h2&gt;\n                &lt;p&gt;Phone: &lt;a href=\"tel:+1234567890\"&gt;+1234567890&lt;/a&gt;&lt;/p&gt;\n                &lt;p&gt;Email: &lt;a href=\"mailto:your.email@example.com\"&gt;your.email@example.com&lt;/a&gt;&lt;/p&gt;\n                &lt;div class=\"social-links\"&gt;\n                    &lt;a href=\"https://linkedin.com/in/yourusername\" target=\"_blank\"&gt;LinkedIn&lt;/a&gt;\n                    &lt;span&gt; | &lt;/span&gt;\n                    &lt;a href=\"https://instagram.com/yourusername\" target=\"_blank\"&gt;Instagram&lt;/a&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/section&gt;\n    &lt;/main&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Week%203%3A%20Final%20Project%20Development/#explanation-of-new-html-elements-and-attributes","title":"Explanation of New HTML Elements and Attributes","text":"<ol> <li> <p>Font and Bootstrap Import (<code>&lt;link&gt;</code> Tags):</p> </li> <li> <p><code>&lt;link href=\"https://fonts.googleapis.com/css2?family=Orbitron:wght@500&amp;display=swap\" rel=\"stylesheet\"&gt;</code>:</p> <ul> <li>This <code>&lt;link&gt;</code> element imports a custom Google Font, \"Orbitron,\" which is applied to the entire page. It provides a unique and modern typeface that enhances the design.</li> <li>The <code>wght@500</code> specifies the font weight (in this case, medium/bold).</li> </ul> </li> <li> <p><code>&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" integrity=\"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin=\"anonymous\"&gt;</code> :</p> <ul> <li>This link includes the Bootstrap CSS framework. It provides base styling, grid layouts, and utility classes that simplify styling and layout processes.</li> </ul> </li> <li> <p><code>&lt;section id=\"contact\" class=\"contact-section\"&gt;</code>:</p> </li> <li> <p>The <code>id=\"contact\"</code> attribute allows internal navigation (e.g., clicking a link in the nav bar with <code>href=\"#contact\"</code> will scroll to this section).</p> </li> <li> <p>The <code>class=\"contact-section\"</code> allows this specific section to be styled independently with targeted CSS.</p> </li> <li> <p>Hyperlinked Contact Information:</p> </li> <li> <p><code>&lt;a href=\"tel:+1234567890\"&gt;+1234567890&lt;/a&gt;</code>:</p> <ul> <li>This <code>tel:</code> protocol in the <code>href</code> attribute creates a clickable link that opens the phone dialer on mobile devices.</li> </ul> </li> <li><code>&lt;a href=\"mailto:your.email@example.com\"&gt;your.email@example.com&lt;/a&gt;</code>:<ul> <li>The <code>mailto:</code> protocol creates a link that opens the user\u2019s default email client to compose a new message.</li> </ul> </li> <li><code>target=\"_blank\"</code> on social links:<ul> <li>Opens the linked page in a new browser tab, which keeps the portfolio page open when users visit external sites.</li> </ul> </li> </ol>"},{"location":"Week%203%3A%20Final%20Project%20Development/#let-us-now-make-changes-to-our-stylecss-according-to-the-changes-we-made-in-the-indexhtml","title":"Let us now make changes to our <code>style.css</code> according to the changes we made in the index.html","text":"<pre><code>/* Reset and Default Styles */\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml, body {\n  scroll-behavior: smooth;\n  font-family: 'Orbitron', sans-serif; \n  overflow-x: hidden;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n}\n\n/* Header */\n.header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px 20px;\n  font-size: 1rem;\n  color: #ffffff;\n  background-color: #1b263b;\n  position: fixed;\n  top: 0;\n  width: 100%;\n  z-index: 1000;\n}\n\n.logo {\n  font-weight: bold;\n  text-decoration: none;\n  color: #ffffff;\n}\n\n.nav-links a {\n  text-decoration: none;\n  color: #ffffff;\n  margin-left: 15px;\n}\n\n.nav-links a:hover {\n  color: #a9d6e5;\n}\n\n/* Section Styling */\n.section {\n  min-height: 100vh;\n  padding-top: 80px; /* Adjusted for fixed header */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n}\n\n.content {\n  max-width: 600px;\n}\n\n/* Section Background Colors */\n.red-section {\n  background-color: #d90429;\n  color: #ffffff;\n}\n\n.white-section {\n  background-color: #ffffff;\n  color: #121212;\n}\n\n.contact-section {\n  background-color: #f0f0f0;\n  color: #333;\n  padding: 40px 20px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  text-align: center;\n}\n\n.social-links a {\n  font-weight: bold;\n  color: #007bff;\n  margin: 0 10px;\n}\n\n.social-links a:hover {\n  text-decoration: underline;\n}\n</code></pre>"},{"location":"Week%203%3A%20Final%20Project%20Development/#explanation-of-new-css-elements","title":"Explanation of New CSS Elements","text":"<ol> <li> <p>Smooth Scroll Behavior (<code>scroll-behavior: smooth</code>):</p> </li> <li> <p><code>scroll-behavior: smooth;</code> in the <code>html, body</code> selector makes scrolling between sections smooth when users click internal navigation links. This enhances the user experience by providing a polished transition effect.</p> </li> <li> <p>Overflow Property (<code>overflow-x: hidden</code>):</p> </li> <li> <p><code>overflow-x: hidden;</code> ensures there is no horizontal scrollbar, preventing accidental sideways scrolling and keeping the layout clean.</p> </li> <li> <p>Header Padding (<code>padding: 10px 20px</code>):</p> </li> <li> <p>This adds vertical (10px) and horizontal (20px) padding within the header, creating space inside and preventing the text and links from touching the edges.</p> </li> <li> <p>Hover Effects (<code>:hover</code>):</p> </li> <li> <p><code>.nav-links a:hover</code> and <code>.social-links a:hover</code>:</p> <ul> <li>Changes the color or style when the user hovers over these links. This feedback indicates that the text is interactive.</li> <li><code>text-decoration: underline;</code> adds an underline to the link on hover for better visual feedback.</li> </ul> </li> <li> <p>Fixed Header Adjustment (<code>padding-top: 80px;</code>):</p> </li> <li> <p>The <code>.section</code> class has <code>padding-top: 80px;</code> to prevent content from being hidden behind the fixed header. This pushes the content down, ensuring it is fully visible.</p> </li> <li> <p>Background Colors and Text Colors:</p> </li> <li> <p><code>.contact-section</code> has a light background color (<code>#f0f0f0</code>) to differentiate it from other sections.</p> </li> <li> <p>The color contrast (<code>color: #333;</code>) ensures text remains readable against the background.</p> </li> <li> <p>Flex Layout for Content:</p> </li> <li> <p><code>.contact-section</code> and <code>.social-links</code> use <code>display: flex</code> with <code>flex-direction: column</code> or <code>row</code> to align items neatly and center-align them for better presentation.</p> </li> <li> <p>Aesthetic Enhancements:</p> </li> <li> <p><code>.social-links a { font-weight: bold; }</code> ensures social media links appear more prominent.</p> </li> <li>Color (<code>color: #007bff;</code>) on social links adds a visually appealing shade of blue that stands out against the background.</li> </ol> <p>After this when we run the run.py file , we can see this looks way better than before , but i think we are lacking on an integral part , that being that background looks too plain so let us add an a background image to make it look better</p>"},{"location":"Week%203%3A%20Final%20Project%20Development/#adding-an-image-background","title":"Adding an Image background","text":"<p>This is very simple and the only things we require are a background image we like and a few changes to our existing CSS code. I have chosen a file called blue_mountain.jpg as my background but you all are free to choose your own backgrounds</p> <p>Firstly the file structure should now look like this</p> <pre><code>portfolio/\n\u251c\u2500\u2500 app/\n\u2502   \u251c\u2500\u2500 templates/\n\u2502   \u2502   \u2514\u2500\u2500 index.html\n\u2502   \u2514\u2500\u2500 static/\n\u2502       \u251c\u2500\u2500 css/\n\u2502       \u2502   \u2514\u2500\u2500 style.css\n\u2502       \u251c\u2500\u2500 images/\n\u2502       \u2502   \u2514\u2500\u2500 blue_mountain.jpg\n\u251c\u2500\u2500 run.py\n</code></pre>"},{"location":"Week%203%3A%20Final%20Project%20Development/#common-mistakes-to-avoid","title":"Common Mistakes to Avoid:","text":"<ul> <li>Absolute Paths: Avoid using paths like <code>C:\\...</code> as they won't work in a web environment , Use relative path instead.</li> <li>File Location: Double-check that <code>blue_mountain.jpg</code> is indeed in the <code>app/static/images</code> folder.</li> </ul> <p>Next we will change the red-section in the <code>style.css</code> </p> <pre><code>.red-section {\n  background-image: url('../images/blue_mountain.jpg');\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  color: #121212;\n}\n</code></pre> <p>And that is it , you now have an image as your background . You can accordingly change the color of the fonts so that it matches the background image and style accordingly . Let us now move onto the BACKEND </p>"},{"location":"Week%203%3A%20Final%20Project%20Development/#3-database-structure-and-setup","title":"3. Database Structure and Setup","text":""},{"location":"Week%203%3A%20Final%20Project%20Development/#1-what-is-a-backend","title":"1. What is a Backend?","text":"<p>The backend is the part of a website that users don\u2019t see. It handles data, processes requests, and runs on a server. It\u2019s like the kitchen in a restaurant where food is prepared \u2013 essential but hidden from customers.</p> <p></p>"},{"location":"Week%203%3A%20Final%20Project%20Development/#2-what-are-tables-in-a-database","title":"2. What are Tables in a Database?","text":"<p>A database stores information in an organized way. Tables are like spreadsheets with columns (e.g., <code>Name</code>, <code>Age</code>) and rows (individual entries). Each table holds data about a specific topic, such as users or products.</p> <p></p>"},{"location":"Week%203%3A%20Final%20Project%20Development/#3-what-is-sql","title":"3. What is SQL?","text":"<p>SQL (Structured Query Language) is used to manage and interact with data in databases. It lets you add, retrieve, update, and delete data. It\u2019s simple to learn and powerful for handling data.</p>"},{"location":"Week%203%3A%20Final%20Project%20Development/#4-how-can-we-get-sql","title":"4. How Can We Get SQL?","text":"<p>You need a database management system (DBMS) to use SQL. Popular options include:</p> <ul> <li>MySQL: Open-source and widely used.</li> <li>SQLite: Lightweight and easy to use.</li> <li>PostgreSQL: Reliable and feature-rich.</li> </ul>"},{"location":"Week%203%3A%20Final%20Project%20Development/#31-creating-the-database-for-the-portfolio-project","title":"3.1 Creating the Database for the Portfolio Project","text":"<p>In this section, we will create a SQLite database to store and manage user comments for the portfolio website. This involves using Python's <code>sqlite3</code> module to handle the database connection and execute SQL commands.</p> <ul> <li> <p><code>comments.db</code>:</p> </li> <li> <p>This sqlite3 database file created automatically.</p> </li> </ul> <p>We would like to create a table of this format:</p> <pre><code>CREATE TABLE comments (\n    ID INT AUTO_INCREMENT PRIMARY KEY,\n    NAME VARCHAR(50),\n    POSITION VARCHAR(50),\n    COMMENT TEXT\n);\n</code></pre> <p>Let us connect the database to the app , we can do this by adding these 2 lines to the <code>run.py</code> </p> <pre><code>app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///comments.db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n</code></pre> <ul> <li> <p><code>SQLALCHEMY_DATABASE_URI</code>: Points to a SQLite database file called <code>comments.db</code>. If this file doesn't exist, it will be created.</p> </li> <li> <p><code>SQLALCHEMY_TRACK_MODIFICATIONS</code>: Set to <code>False</code> to disable tracking changes to improve performance.</p> </li> </ul>"},{"location":"Week%203%3A%20Final%20Project%20Development/#what-is-orm","title":"What is ORM?","text":"<p>Let's walk through how you would handle database operations without ORM (using raw SQL queries) versus with ORM (using SQLAlchemy), and why ORM is often preferred.</p>"},{"location":"Week%203%3A%20Final%20Project%20Development/#without-orm-using-raw-sql-queries","title":"Without ORM: Using Raw SQL Queries","text":"<p>When you don't use an ORM, you need to manually write SQL queries for every interaction with the database. This approach requires a thorough understanding of SQL and the structure of your database. Here\u2019s how the <code>Comment</code> table operations would look with raw SQL in Python</p>"},{"location":"Week%203%3A%20Final%20Project%20Development/#inserting-a-new-record-raw-sql","title":"Inserting a New Record (RAW SQL)","text":"<pre><code>conn = sqlite3.connect('comments.db')\ncursor = conn.cursor()\n\n# Insert a new comment\nname = \"John Doe\"\nposition = \"Developer\"\ncomment = \"This is a raw SQL comment.\"\ncursor.execute('''\nINSERT INTO comments (name, position, comment)\nVALUES (?, ?, ?)\n''', (name, position, comment))\n\nconn.commit()\nconn.close()\n</code></pre>"},{"location":"Week%203%3A%20Final%20Project%20Development/#inserting-a-new-record-orm","title":"Inserting a New Record (ORM)","text":"<pre><code>db = SQLAlchemy(app)\n\nclass Comment(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), nullable=False)\n    position = db.Column(db.String(120))\n    comment = db.Column(db.Text, nullable=False)\n\n    def __repr__(self):\n        return f\"&lt;Comment {self.name}&gt;\"\n\n\nnew_comment = Comment(name=\"John Doe\", position=\"Developer\", comment=\"This is an ORM comment.\")\ndb.session.add(new_comment)\ndb.session.commit()\n</code></pre>"},{"location":"Week%203%3A%20Final%20Project%20Development/#advantages-of-using-orm","title":"Advantages of Using ORM:","text":"<ol> <li>Simpler Code: ORM reduces the amount of code you need to write. You interact with the database using Python syntax, which is more readable and maintainable.</li> <li>Security: SQLAlchemy automatically uses parameterized queries, which helps prevent SQL injection.</li> <li>Abstraction: You don't need to write SQL code for basic operations. The ORM handles the SQL generation, making code easier to read and understand.</li> <li>Relationships: ORM can easily define relationships between tables using Python, which is challenging and verbose with raw SQL.</li> <li>Portability: Switching databases is easier since SQLAlchemy abstracts the database backend. You can move from SQLite to PostgreSQL or MySQL with minimal changes.</li> <li>Debugging: Easier to debug due to higher-level error messages.</li> </ol>"},{"location":"Week%203%3A%20Final%20Project%20Development/#32-creating-a-form-to-accept-and-show-comments","title":"3.2 Creating a Form to accept and show comments","text":"<p>Before we move onto how we will connect these databases , we first need a way for the user to input their comments . This can be done using the <code>&lt;form&gt;</code> element in html .</p>"},{"location":"Week%203%3A%20Final%20Project%20Development/#changes-to-the-indexhtml","title":"Changes to the <code>index.html</code>","text":"<p>Add a new section to your <code>index.html</code> called comment-section which will have both the form and the carousel to display the comments . Let us take a look at the changes to be made.</p> <pre><code>    &lt;script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\" integrity=\"sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js\" integrity=\"sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.min.js\" integrity=\"sha384-w1Q4orYjBQndcko6MimVbzY0tgp4pWB4lZ7lr30WKz0vr/aWKhXdBNmNb5D92v7s\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n</code></pre> <pre><code>    &lt;!-- Comments Section --&gt;\n        &lt;section id=\"comments\" class=\"section comments-section\"&gt;\n            &lt;div class=\"container\"&gt;\n                &lt;h2 class=\"text-center\"&gt;Comments&lt;/h2&gt;\n\n                &lt;!-- Comment Form --&gt;\n                &lt;h3&gt;Add a Comment&lt;/h3&gt;\n                &lt;form action=\"/add_comment\" method=\"POST\" class=\"comment-form\"&gt;\n                    &lt;div class=\"form-group\"&gt;\n                        &lt;input type=\"text\" name=\"name\" class=\"form-control\" placeholder=\"Your Name\" required&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"form-group\"&gt;\n                        &lt;input type=\"text\" name=\"position\" class=\"form-control\" placeholder=\"Your Position\"&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"form-group\"&gt;\n                        &lt;textarea name=\"comment\" class=\"form-control\" placeholder=\"Your Comment\" rows=\"3\" required&gt;&lt;/textarea&gt;\n                    &lt;/div&gt;\n                    &lt;button type=\"submit\" class=\"btn btn-primary btn-submit\"&gt;Submit Comment&lt;/button&gt;\n                &lt;/form&gt;\n            &lt;/div&gt;\n        &lt;/section&gt;\n</code></pre>"},{"location":"Week%203%3A%20Final%20Project%20Development/#explanation-of-new-parts-in-indexhtml","title":"Explanation of New Parts in <code>index.html</code>","text":"<p>Comment Form:</p> <ul> <li><code>&lt;form action=\"/add_comment\" method=\"POST\" class=\"comment-form\"&gt;</code>:</li> <li>A form that sends user input to the <code>/add_comment</code> route via the POST method for handling submissions.</li> <li><code>&lt;div class=\"form-group\"&gt;</code>:</li> <li>A Bootstrap class that provides styling and spacing for form controls.</li> <li><code>&lt;input&gt;</code> and <code>&lt;textarea&gt;</code>:</li> <li>Form elements for user input, styled using Bootstrap's <code>form-control</code> class.</li> </ul>"},{"location":"Week%203%3A%20Final%20Project%20Development/#the-carousel","title":"The Carousel","text":"<p>Now that puts the form in place but we also need a way to display the comments.this is where we bring in the carousel which we will place above the form </p> <pre><code>&lt;!-- Carousel for Comments--&gt;\n&lt;div id=\"commentCarousel\" class=\"carousel slide\" data-ride=\"carousel\"&gt;\n    &lt;div class=\"carousel-inner\"&gt;\n        {% for comment in comments %}\n            &lt;div class=\"carousel-item {% if loop.first %}active{% endif %}\"&gt;\n                &lt;div class=\"comment-box\"&gt;\n                    &lt;strong&gt;{{ comment['NAME'] }}&lt;/strong&gt; ({{ comment['POSITION'] }}):\n                    &lt;p&gt;{{ comment['COMMENT'] }}&lt;/p&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        {% endfor %}\n    &lt;/div&gt;\n    &lt;a class=\"carousel-control-prev\" href=\"#commentCarousel\" role=\"button\" data-slide=\"prev\"&gt;\n        &lt;span class=\"carousel-control-prev-icon\" aria-hidden=\"true\"&gt;&lt;/span&gt;\n        &lt;span class=\"sr-only\"&gt;Previous&lt;/span&gt;\n    &lt;/a&gt;\n    &lt;a class=\"carousel-control-next\" href=\"#commentCarousel\" role=\"button\" data-slide=\"next\"&gt;\n        &lt;span class=\"carousel-control-next-icon\" aria-hidden=\"true\"&gt;&lt;/span&gt;\n        &lt;span class=\"sr-only\"&gt;Next&lt;/span&gt;\n    &lt;/a&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"Week%203%3A%20Final%20Project%20Development/#how-comments-are-loaded","title":"How Comments Are Loaded:","text":"<p>Backend Process:</p> <p>In your Flask <code>run.py</code> file, there is a route that retrieves comments from the database and passes them to the template:</p> <pre><code>@app.route('/')\ndef index():\n    comments = Comment.query.all()  # Retrieves all comments from the database\n    return render_template('index.html', comments=[{'NAME': c.name, 'POSITION': c.position, 'COMMENT': c.comment} for c in comments])\n</code></pre> <p>This route fetches all the records from the <code>Comment</code> table and converts them into dictionaries that are passed to the <code>index.html</code> template.</p> <p>Now your <code>index.html</code> should look like this</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;My Portfolio&lt;/title&gt;\n    &lt;!-- Link to Bootstrap for base styling --&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" integrity=\"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin=\"anonymous\"&gt;\n\n    &lt;!-- Custom font --&gt;\n    &lt;link href=\"https://fonts.googleapis.com/css2?family=Orbitron:wght@500&amp;display=swap\" rel=\"stylesheet\"&gt;\n    &lt;!-- Custom CSS --&gt;\n    &lt;link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/style.css') }}\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n    &lt;!-- Header with Navigation Links --&gt;\n    &lt;header class=\"header\"&gt;\n        &lt;a href=\"#home\" class=\"logo\"&gt;My Portfolio&lt;/a&gt;\n        &lt;nav class=\"nav-links\"&gt;\n            &lt;a href=\"#home\"&gt;Home&lt;/a&gt;\n            &lt;a href=\"#about\"&gt;About Me&lt;/a&gt;\n            &lt;a href=\"#comments\"&gt;Comments&lt;/a&gt;\n            &lt;a href=\"#contact\"&gt;Contact&lt;/a&gt;\n        &lt;/nav&gt;\n    &lt;/header&gt;\n\n    &lt;!-- Main Sections --&gt;\n    &lt;main&gt;\n        &lt;!-- Home Section --&gt;\n        &lt;section id=\"home\" class=\"section red-section\"&gt;\n            &lt;div class=\"content\"&gt;\n                &lt;h1 class=\"main-text\"&gt;Mustafa Fatehi&lt;/h1&gt;\n                &lt;p&gt;Welcome to my portfolio! I am excited to share my work with you.&lt;/p&gt;\n            &lt;/div&gt;\n        &lt;/section&gt;\n\n        &lt;!-- About Me Section --&gt;\n        &lt;section id=\"about\" class=\"section white-section\"&gt;\n            &lt;div class=\"content\"&gt;\n                &lt;h1&gt;About Me&lt;/h1&gt;\n                &lt;p&gt;Hello! I'm Mustafa, a web developer experienced in Flask, Python, and front-end technologies. I create responsive, user-friendly web applications.&lt;/p&gt;\n            &lt;/div&gt;\n        &lt;/section&gt;\n\n        &lt;!-- Comments Section --&gt;\n        &lt;section id=\"comments\" class=\"section comments-section\"&gt;\n            &lt;div class=\"container\"&gt;\n                &lt;h2 class=\"text-center\"&gt;Comments&lt;/h2&gt;\n\n                &lt;!-- Carousel for Comments--&gt;\n                &lt;div id=\"commentCarousel\" class=\"carousel slide\" data-ride=\"carousel\"&gt;\n                    &lt;div class=\"carousel-inner\"&gt;\n                        {% for comment in comments %}\n                            &lt;div class=\"carousel-item {% if loop.first %}active{% endif %}\"&gt;\n                                &lt;div class=\"comment-box\"&gt;\n                                    &lt;strong&gt;{{ comment['NAME'] }}&lt;/strong&gt; ({{ comment['POSITION'] }}):\n                                    &lt;p&gt;{{ comment['COMMENT'] }}&lt;/p&gt;\n                                &lt;/div&gt;\n                            &lt;/div&gt;\n                        {% endfor %}\n                    &lt;/div&gt;\n                    &lt;a class=\"carousel-control-prev\" href=\"#commentCarousel\" role=\"button\" data-slide=\"prev\"&gt;\n                        &lt;span class=\"carousel-control-prev-icon\" aria-hidden=\"true\"&gt;&lt;/span&gt;\n                        &lt;span class=\"sr-only\"&gt;Previous&lt;/span&gt;\n                    &lt;/a&gt;\n                    &lt;a class=\"carousel-control-next\" href=\"#commentCarousel\" role=\"button\" data-slide=\"next\"&gt;\n                        &lt;span class=\"carousel-control-next-icon\" aria-hidden=\"true\"&gt;&lt;/span&gt;\n                        &lt;span class=\"sr-only\"&gt;Next&lt;/span&gt;\n                    &lt;/a&gt;\n                &lt;/div&gt;\n\n                &lt;!-- Comment Form --&gt;\n                &lt;h3&gt;Add a Comment&lt;/h3&gt;\n                &lt;form action=\"/add_comment\" method=\"POST\" class=\"comment-form\"&gt;\n                    &lt;div class=\"form-group\"&gt;\n                        &lt;input type=\"text\" name=\"name\" class=\"form-control\" placeholder=\"Your Name\" required&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"form-group\"&gt;\n                        &lt;input type=\"text\" name=\"position\" class=\"form-control\" placeholder=\"Your Position\"&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"form-group\"&gt;\n                        &lt;textarea name=\"comment\" class=\"form-control\" placeholder=\"Your Comment\" rows=\"3\" required&gt;&lt;/textarea&gt;\n                    &lt;/div&gt;\n                    &lt;button type=\"submit\" class=\"btn btn-primary btn-submit\"&gt;Submit Comment&lt;/button&gt;\n                &lt;/form&gt;\n            &lt;/div&gt;\n        &lt;/section&gt;\n\n        &lt;!-- Contact Section --&gt;\n        &lt;section id=\"contact\" class=\"contact-section\"&gt;\n            &lt;div class=\"content\"&gt;\n                &lt;h2&gt;Contact&lt;/h2&gt;\n                &lt;p&gt;Phone: &lt;a href=\"tel:+1234567890\"&gt;+1234567890&lt;/a&gt;&lt;/p&gt;\n                &lt;p&gt;Email: &lt;a href=\"mailto:your.email@example.com\"&gt;your.email@example.com&lt;/a&gt;&lt;/p&gt;\n                &lt;div class=\"social-links\"&gt;\n                    &lt;a href=\"https://linkedin.com/in/yourusername\" target=\"_blank\"&gt;LinkedIn&lt;/a&gt;\n                    &lt;span&gt; | &lt;/span&gt;\n                    &lt;a href=\"https://instagram.com/yourusername\" target=\"_blank\"&gt;Instagram&lt;/a&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/section&gt;\n    &lt;/main&gt;\n    &lt;!-- JavaScript for Carousel --&gt;\n    &lt;script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\" integrity=\"sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js\" integrity=\"sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.min.js\" integrity=\"sha384-w1Q4orYjBQndcko6MimVbzY0tgp4pWB4lZ7lr30WKz0vr/aWKhXdBNmNb5D92v7s\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Now your <code>run.py</code> should look like this</p> <pre><code>from flask import Flask, render_template, request, redirect\nfrom flask_sqlalchemy import SQLAlchemy\n\n\napp = Flask(__name__, static_folder='app/static', template_folder='app/templates')\n\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///comments.db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n\ndb = SQLAlchemy(app)\n\n# Define the Comment model\nclass Comment(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), nullable=False)\n    position = db.Column(db.String(120))\n    comment = db.Column(db.Text, nullable=False)\n\n    def __repr__(self):\n        return f\"&lt;Comment {self.name}&gt;\"\n\n# Create the database tables (if not already created)\nwith app.app_context():\n    db.create_all()\n\n@app.route('/')\ndef index():\n    comments = Comment.query.all()\n    return render_template('index.html', comments=[{'NAME': c.name, 'POSITION': c.position, 'COMMENT': c.comment} for c in comments])\n\n@app.route('/add_comment', methods=['POST'])\ndef add_comment():\n    name = request.form['name']\n    position = request.form['position']\n    comment_text = request.form['comment']\n\n    new_comment = Comment(name=name, position=position, comment=comment_text)\n    db.session.add(new_comment)\n    db.session.commit()\n    return redirect('/')\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> <p>Now making changes to the <code>style.css</code> , add these to the style .css</p> <pre><code>/* Comments Section Styling */\n.comments-section {\n  background-color: #302b2b;\n  padding: 40px 20px;\n  text-align: center;\n}\n\n.comments-section h2, .comments-section h3 {\n  margin-bottom: 20px;\n  color: #ffffff;\n}\n\n/* Carousel Styling */\n.carousel {\n  width: 100%;\n  margin-bottom: 30px;\n}\n\n.carousel-inner {\n  max-width: 800px;\n  margin: 0 auto;\n}\n\n.comment-box {\n  background-color: #494545; /* Dark gray background */\n  color: #ffffff; /* White text color */\n  padding: 20px;\n  border-radius: 10px;\n  font-size: 1.1rem;\n  text-align: left;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Added shadow for depth */\n}\n\n/* Carousel Controls */\n.carousel-control-prev, .carousel-control-next {\n  color: #ffffff;\n}\n\n.carousel-control-prev-icon,\n.carousel-control-next-icon {\n  background-color: #ffffff; /* White icons */\n  border-radius: 50%;\n}\n\n/* Comment Form Styling */\n.comment-form {\n  max-width: 600px;\n  margin: 0 auto;\n  padding: 20px; /* Padding for better spacing */\n  background-color: #383838; /* Background color for form */\n  border-radius: 10px; /* Rounded corners */\n}\n\n.comment-form .form-group {\n  margin-bottom: 15px;\n}\n\n.comment-form .form-control {\n  font-size: 1rem;\n  padding: 10px;\n  background-color: #494949; /* Darker input background */\n  color: #ffffff; /* White text color */\n  border: none; /* Removed default border */\n  border-radius: 5px; /* Rounded corners */\n}\n\n.comment-form .form-control::placeholder {\n  color: #b0b0b0; /* Lighter placeholder color */\n}\n\n.btn-submit {\n  background-color: #ff6b6b;\n  border: none;\n  color: #fff;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  width: 100%;\n  border-radius: 5px; /* Rounded corners */\n  transition: background-color 0.3s; /* Smooth transition for hover */\n}\n\n.btn-submit:hover {\n  background-color: #ff8566;\n}\n</code></pre>"},{"location":"Week%203%3A%20Final%20Project%20Development/#4-javascript-popup","title":"4. Javascript Popup","text":"<p>This is just a small bit of javascript which will show a popup everytime a new comment is added.</p> <pre><code>&lt;script&gt;\n        document.addEventListener(\"DOMContentLoaded\", function() {\n            const form = document.querySelector('.comment-form');\n            form.addEventListener('submit', function(event) {\n                alert(\"Comment has been added!\");\n            });\n        });\n&lt;/script&gt;\n</code></pre> <p>This script runs when the page is fully loaded:</p> <ul> <li> <p><code>document.addEventListener(\"DOMContentLoaded\", function() { ... })</code>: Ensures the code inside runs only after the DOM (web page) is fully loaded.</p> </li> <li> <p><code>const form = document.querySelector('.comment-form')</code>: Selects the form element with the class <code>comment-form</code>.</p> </li> <li> <p><code>form.addEventListener('submit', function(event) { ... })</code>: Adds an event listener to the form that triggers when it is submitted.</p> </li> <li> <p><code>alert(\"Comment has been added!\")</code>: Displays an alert message saying \"Comment has been added!\" when the form is submitted.</p> </li> </ul>"},{"location":"Week%203%3A%20Final%20Project%20Development/#5-running-the-app","title":"5. Running the App","text":"<p>To run the flask app now , type the following command into the command shell and the site on http://127.0.0.1:5000</p> <pre><code>python run.py\n</code></pre>"},{"location":"Week%203%3A%20Final%20Project%20Development/#conclusion","title":"Conclusion","text":"<p>In this project, we built a complete web application using Flask, showcasing the power of combining both front-end and back-end development to create a functional, interactive portfolio website. Here\u2019s what we achieved step by step:</p> <ol> <li> <p>Understanding Front-End and Back-End:</p> </li> <li> <p>We explored the roles of front-end (HTML, CSS, JavaScript) and back-end (Flask, Python) technologies in building web applications.</p> </li> <li> <p>We discussed how HTTP methods like GET and POST allow communication between the front-end and back-end.</p> </li> <li> <p>Building the Web Page:</p> </li> <li> <p>We structured the main <code>index.html</code> page, including sections for displaying portfolio details, user comments, and contact information.</p> </li> <li> <p>We added styling with CSS and used Bootstrap for a responsive design, making the page look clean and professional.</p> </li> <li> <p>Creating the Database:</p> </li> <li> <p>We set up a SQLite database and created a <code>Comment</code> model with SQLAlchemy to store user comments.</p> </li> <li> <p>We ensured the database could store, retrieve, and manage user input efficiently.</p> </li> <li> <p>Developing the Comment Form and Display Carousel:</p> </li> <li> <p>We integrated an input form that allows users to submit their comments and a Bootstrap carousel to display these comments dynamically.</p> </li> <li> <p>Using Jinja2 templating, we looped through the list of comments from the database and rendered them on the page.</p> </li> <li> <p>Adding JavaScript for User Feedback:</p> </li> <li> <p>We added a simple JavaScript script that shows an alert to confirm when a comment is successfully submitted, enhancing user experience.</p> </li> <li> <p>Connecting Front-End and Back-End:</p> </li> <li> <p>The form submissions were linked to the Flask back-end, which processed the data, stored it in the database, and displayed it in the carousel.</p> </li> <li>This demonstrated the seamless interaction between the front-end and back-end of a full-stack application.</li> </ol> <p></p>"},{"location":"Week%203%3A%20Final%20Project%20Development/src/Final%20Code/","title":"Final Code","text":""},{"location":"Week%203%3A%20Final%20Project%20Development/src/Final%20Code/#html","title":"HTML","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;My Portfolio&lt;/title&gt;\n    &lt;!-- Link to Bootstrap for base styling --&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" integrity=\"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin=\"anonymous\"&gt;\n    &lt;!-- Custom font --&gt;\n    &lt;link href=\"https://fonts.googleapis.com/css2?family=Orbitron:wght@500&amp;display=swap\" rel=\"stylesheet\"&gt;\n    &lt;!-- Custom CSS --&gt;\n    &lt;link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/style.css') }}\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n    &lt;!-- Header with Navigation Links --&gt;\n    &lt;header class=\"header\"&gt;\n        &lt;a href=\"#home\" class=\"logo\"&gt;My Portfolio&lt;/a&gt;\n        &lt;nav class=\"nav-links\"&gt;\n            &lt;a href=\"#home\"&gt;Home&lt;/a&gt;\n            &lt;a href=\"#about\"&gt;About Me&lt;/a&gt;\n            &lt;a href=\"#comments\"&gt;Comments&lt;/a&gt;\n            &lt;a href=\"#contact\"&gt;Contact&lt;/a&gt;\n        &lt;/nav&gt;\n    &lt;/header&gt;\n\n    &lt;!-- Main Sections --&gt;\n    &lt;main&gt;\n        &lt;!-- Home Section --&gt;\n        &lt;section id=\"home\" class=\"section red-section\"&gt;\n            &lt;div class=\"content\"&gt;\n                &lt;h1 class=\"main-text\"&gt;Mustafa Fatehi&lt;/h1&gt;\n                &lt;p&gt;Welcome to my portfolio! I am excited to share my work with you.&lt;/p&gt;\n            &lt;/div&gt;\n        &lt;/section&gt;\n\n        &lt;!-- About Me Section --&gt;\n        &lt;section id=\"about\" class=\"section white-section\"&gt;\n            &lt;div class=\"content\"&gt;\n                &lt;h1&gt;About Me&lt;/h1&gt;\n                &lt;p&gt;Hello! I'm Mustafa, a web developer experienced in Flask, Python, and front-end technologies. I create responsive, user-friendly web applications.&lt;/p&gt;\n            &lt;/div&gt;\n        &lt;/section&gt;\n\n        &lt;!-- Comments Section --&gt;\n        &lt;section id=\"comments\" class=\"section comments-section\"&gt;\n            &lt;div class=\"container\"&gt;\n                &lt;h2 class=\"text-center\"&gt;Comments&lt;/h2&gt;\n\n                &lt;!-- Carousel for Comments--&gt;\n                &lt;div id=\"commentCarousel\" class=\"carousel slide\" data-ride=\"carousel\"&gt;\n                    &lt;div class=\"carousel-inner\"&gt;\n                        {% for comment in comments %}\n                            &lt;div class=\"carousel-item {% if loop.first %}active{% endif %}\"&gt;\n                                &lt;div class=\"comment-box\"&gt;\n                                    &lt;strong&gt;{{ comment['NAME'] }}&lt;/strong&gt; ({{ comment['POSITION'] }}):\n                                    &lt;p&gt;{{ comment['COMMENT'] }}&lt;/p&gt;\n                                &lt;/div&gt;\n                            &lt;/div&gt;\n                        {% endfor %}\n                    &lt;/div&gt;\n                    &lt;a class=\"carousel-control-prev\" href=\"#commentCarousel\" role=\"button\" data-slide=\"prev\"&gt;\n                        &lt;span class=\"carousel-control-prev-icon\" aria-hidden=\"true\"&gt;&lt;/span&gt;\n                        &lt;span class=\"sr-only\"&gt;Previous&lt;/span&gt;\n                    &lt;/a&gt;\n                    &lt;a class=\"carousel-control-next\" href=\"#commentCarousel\" role=\"button\" data-slide=\"next\"&gt;\n                        &lt;span class=\"carousel-control-next-icon\" aria-hidden=\"true\"&gt;&lt;/span&gt;\n                        &lt;span class=\"sr-only\"&gt;Next&lt;/span&gt;\n                    &lt;/a&gt;\n                &lt;/div&gt;\n\n                &lt;!-- Comment Form --&gt;\n                &lt;h3&gt;Add a Comment&lt;/h3&gt;\n                &lt;form action=\"/add_comment\" method=\"POST\" class=\"comment-form\"&gt;\n                    &lt;div class=\"form-group\"&gt;\n                        &lt;input type=\"text\" name=\"name\" class=\"form-control\" placeholder=\"Your Name\" required&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"form-group\"&gt;\n                        &lt;input type=\"text\" name=\"position\" class=\"form-control\" placeholder=\"Your Position\"&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"form-group\"&gt;\n                        &lt;textarea name=\"comment\" class=\"form-control\" placeholder=\"Your Comment\" rows=\"3\" required&gt;&lt;/textarea&gt;\n                    &lt;/div&gt;\n                    &lt;button type=\"submit\" class=\"btn btn-primary btn-submit\"&gt;Submit Comment&lt;/button&gt;\n                &lt;/form&gt;\n            &lt;/div&gt;\n        &lt;/section&gt;\n\n        &lt;!-- Contact Section --&gt;\n        &lt;section id=\"contact\" class=\"contact-section\"&gt;\n            &lt;div class=\"content\"&gt;\n                &lt;h2&gt;Contact&lt;/h2&gt;\n                &lt;p&gt;Phone: &lt;a href=\"tel:+1234567890\"&gt;+1234567890&lt;/a&gt;&lt;/p&gt;\n                &lt;p&gt;Email: &lt;a href=\"mailto:your.email@example.com\"&gt;your.email@example.com&lt;/a&gt;&lt;/p&gt;\n                &lt;div class=\"social-links\"&gt;\n                    &lt;a href=\"https://linkedin.com/in/yourusername\" target=\"_blank\"&gt;LinkedIn&lt;/a&gt;\n                    &lt;span&gt; | &lt;/span&gt;\n                    &lt;a href=\"https://instagram.com/yourusername\" target=\"_blank\"&gt;Instagram&lt;/a&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/section&gt;\n    &lt;/main&gt;\n    &lt;!-- JavaScript for Carousel --&gt;\n    &lt;script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\" integrity=\"sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js\" integrity=\"sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.min.js\" integrity=\"sha384-w1Q4orYjBQndcko6MimVbzY0tgp4pWB4lZ7lr30WKz0vr/aWKhXdBNmNb5D92v7s\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n    &lt;!-- JavaScript for adding a popup when comments added --&gt;\n    &lt;script&gt;\n        document.addEventListener(\"DOMContentLoaded\", function() {\n            const form = document.querySelector('.comment-form');\n            form.addEventListener('submit', function(event) {\n                alert(\"Comment has been added!\");\n            });\n        });\n    &lt;/script&gt;\n\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Week%203%3A%20Final%20Project%20Development/src/Final%20Code/#css","title":"CSS","text":"<pre><code>/* Reset and Default Styles */\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml, body {\n  scroll-behavior: smooth;\n  font-family: 'Orbitron', sans-serif;\n  overflow-x: hidden;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n}\n\n/* Header */\n.header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px 20px;\n  font-size: 1rem;\n  color: #ffffff;\n  background-color: #1b263b;\n  position: fixed;\n  top: 0;\n  width: 100%;\n  z-index: 1000;\n}\n\n.logo {\n  font-weight: bold;\n  text-decoration: none;\n  color: #ffffff;\n}\n\n.nav-links a {\n  text-decoration: none;\n  color: #ffffff;\n  margin-left: 15px;\n}\n\n.nav-links a:hover {\n  color: #a9d6e5;\n}\n\n/* Section Styling */\n.section {\n  min-height: 100vh;\n  padding-top: 80px; /* Adjusted for fixed header */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n}\n\n.content {\n  max-width: 600px;\n}\n\n/* Section Background Colors */\n.red-section {\n  background-image: url('../images/blue_mountain.jpg');\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  color: #121212;\n}\n\n.white-section {\n  background-color: #ffffff;\n  color: #121212;\n}\n\n.contact-section {\n  background-color: #f0f0f0;\n  color: #333;\n  padding: 40px 20px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  text-align: center;\n}\n\n.social-links a {\n  font-weight: bold;\n  color: #007bff;\n  margin: 0 10px;\n}\n\n.social-links a:hover {\n  text-decoration: underline;\n}\n\n/* Comments Section Styling */\n.comments-section {\n  background-color: #302b2b;\n  padding: 40px 20px;\n  text-align: center;\n}\n\n.comments-section h2, .comments-section h3 {\n  margin-bottom: 20px;\n  color: #ffffff;\n}\n\n/* Carousel Styling */\n.carousel {\n  width: 100%;\n  margin-bottom: 30px;\n}\n\n.carousel-inner {\n  max-width: 800px;\n  margin: 0 auto;\n}\n\n.comment-box {\n  background-color: #494545; /* Dark gray background */\n  color: #ffffff; /* White text color */\n  padding: 20px;\n  border-radius: 10px;\n  font-size: 1.1rem;\n  text-align: left;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Added shadow for depth */\n}\n\n/* Carousel Controls */\n.carousel-control-prev, .carousel-control-next {\n  color: #ffffff;\n}\n\n.carousel-control-prev-icon,\n.carousel-control-next-icon {\n  background-color: #ffffff; /* White icons */\n  border-radius: 50%;\n}\n\n/* Comment Form Styling */\n.comment-form {\n  max-width: 600px;\n  margin: 0 auto;\n  padding: 20px; /* Padding for better spacing */\n  background-color: #383838; /* Background color for form */\n  border-radius: 10px; /* Rounded corners */\n}\n\n.comment-form .form-group {\n  margin-bottom: 15px;\n}\n\n.comment-form .form-control {\n  font-size: 1rem;\n  padding: 10px;\n  background-color: #494949; /* Darker input background */\n  color: #ffffff; /* White text color */\n  border: none; /* Removed default border */\n  border-radius: 5px; /* Rounded corners */\n}\n\n.comment-form .form-control::placeholder {\n  color: #b0b0b0; /* Lighter placeholder color */\n}\n\n.btn-submit {\n  background-color: #ff6b6b;\n  border: none;\n  color: #fff;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  width: 100%;\n  border-radius: 5px; /* Rounded corners */\n  transition: background-color 0.3s; /* Smooth transition for hover */\n}\n\n.btn-submit:hover {\n  background-color: #ff8566;\n}\n</code></pre>"},{"location":"Week%203%3A%20Final%20Project%20Development/src/Final%20Code/#flaskpython","title":"Flask/Python","text":"<pre><code>from flask import Flask, render_template, request, redirect\nfrom flask_sqlalchemy import SQLAlchemy\n\n# Initialize the Flask app\napp = Flask(__name__, static_folder='app/static', template_folder='app/templates')\n\n# Configure the SQLite database\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///comments.db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n\n# Initialize SQLAlchemy\ndb = SQLAlchemy(app)\n\n# Define the Comment model\nclass Comment(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), nullable=False)\n    position = db.Column(db.String(120))\n    comment = db.Column(db.Text, nullable=False)\n\n    def __repr__(self):\n        return f\"&lt;Comment {self.name}&gt;\"\n\n# Create the database tables (if not already created)\nwith app.app_context():\n    db.create_all()\n\n# Route for the homepage\n@app.route('/')\ndef index():\n    comments = Comment.query.all()\n    return render_template('index.html', comments=[{'NAME': c.name, 'POSITION': c.position, 'COMMENT': c.comment} for c in comments])\n\n# Route for handling the form submission\n@app.route('/add_comment', methods=['POST'])\ndef add_comment():\n    name = request.form['name']\n    position = request.form['position']\n    comment_text = request.form['comment']\n\n    # Create a new comment instance and add it to the database\n    new_comment = Comment(name=name, position=position, comment=comment_text)\n    db.session.add(new_comment)\n    db.session.commit()\n    return redirect('/')\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>"},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/","title":"Session Overview","text":"<p>These are the topics that we'll broadly be covering in this session:</p>"},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/#hosting-your-web-application","title":"Hosting Your Web Application","text":"<ul> <li> <p>Purpose: Overview of web hosting and its importance.</p> </li> <li> <p>Content: The concept of web hosting, domain names, and the general process of deploying a website.</p> </li> <li> <p>Overview:</p> <ul> <li>Hosting Your Web Application</li> <li>Self hosting</li> <li>Cloud hosting</li> <li>A little bit about the internet</li> <li>A few free hosting services (with free tier):</li> </ul> </li> </ul>"},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/#intro-to-git-and-github","title":"Intro to Git and GitHub","text":"<ul> <li> <p>Purpose: Introduction to Git and GitHub for version control.</p> </li> <li> <p>Content: Installing Git, setting up a GitHub repository, clone a repo, commit changes, and push to GitHub.</p> </li> <li> <p>Overview:</p> <ul> <li>Git and GitHub: Version Control System</li> <li>What\u2019s the Point?</li> <li>Key Benefits</li> <li>How to Install Git?</li> <li>Want to Know More?</li> </ul> </li> </ul>"},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/#working-with-secrets","title":"Working with Secrets","text":"<ul> <li> <p>Purpose: Learn how to secure sensitive information in your code.</p> </li> <li> <p>Content: Best practices for managing secrets using <code>.env</code> files</p> </li> <li> <p>Overview:</p> <ul> <li>What's a secret?</li> <li>The Danger</li> <li>Environment Variables</li> <li>Accessing the environment</li> </ul> </li> </ul>"},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/#getting-started-with-pythonanywhere","title":"Getting Started with PythonAnywhere","text":"<ul> <li> <p>Purpose: Guide to hosting your Python application on PythonAnywhere.</p> </li> <li> <p>Content: Step-by-step instructions for deploying a Flask or Django app on PythonAnywhere. Includes setting up an account, configuring the web app, and linking to GitHub for automated deployment.</p> </li> <li> <p>Overview:</p> <ul> <li>Getting Started with PythonAnywhere</li> <li>What is PythonAnywhere?</li> <li>Why Use PythonAnywhere?</li> <li>Key Features</li> <li>How Does It Work?</li> <li>Deploying your Python Web App on PythonAnywhere</li> </ul> </li> </ul>"},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/GITHUB/","title":"Git and GitHub: Version Control System","text":"<p> Git is a super powerful version control system. </p> <p>It's essential for managing and tracking changes in code or files, especially when collaborating with a team. </p> <p>With Git, developers can work on multiple features simultaneously, track changes, and avoid conflicts.</p>"},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/GITHUB/#whats-the-point","title":"What\u2019s the Point?","text":"<p>In our case, git provides an easy and organized way to access and manage our code for deployment.</p> <p>It ensures that we have the latest version of the code across all devices and environments.</p>"},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/GITHUB/#key-benefits","title":"Key Benefits:","text":"<ol> <li> <p>Collaboration: Multiple developers can work on the same project without overwriting each other's work.</p> </li> <li> <p>Version History: Every change is tracked, making it easy to roll back to previous versions if needed.</p> </li> <li> <p>Branching: Create different versions of your project for features, testing, or bug fixes.</p> </li> <li> <p>Deployment: Easily pull the latest version of your code for deploying to production.</p> </li> </ol>"},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/GITHUB/#how-to-install-git","title":"How to Install Git?","text":"<p>Windows / Mac / Linux: Click here to download Git.</p>"},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/GITHUB/#git-cheatsheet","title":"Git Cheatsheet","text":""},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/GITHUB/#configuring-user-information-for-local-repos","title":"Configuring user information for local repos:","text":"<ul> <li> <p>Set the name you want attached to your commit transactions <pre><code>git config --global user.name \"[name]\"\n</code></pre></p> </li> <li> <p>Set the email you want attached to your commit transactions <pre><code>git config --global user.email \"[email address]\"\n</code></pre></p> </li> </ul>"},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/GITHUB/#creating-repositories","title":"Creating repositories","text":"<p>When starting out with a new repo, you only need to do it once; either locally, then push to GitHub, or by cloning an existing repository.</p> <ul> <li> <p>Turn an existing directory into a git repository <pre><code>git init\n</code></pre></p> </li> <li> <p>Clone a repo that exists on GitHub <pre><code>git clone [url]\n</code></pre></p> </li> </ul>"},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/GITHUB/#the-gitignore-file","title":"The .gitignore file","text":"<p>Sometimes it may be a good idea to exclude files from being tracked with Git. This can be done by using a special file named <code>.gitignore</code>. Just put in the file names that you dont want to track here.</p> <p>For example: Contents of .gitignore could be: <pre><code>.env\n__pycache__/\n*.pyc\ninstance/\n*.db\nmyenv\n</code></pre></p> <p>Here, there are a few things going on.. 1. .env: Never forget to add this onto .gitignore! Your secrets will get leaked!</p> <ol> <li> <p>pycache/ and .pyc: This folder contains the bytecode files that python compiles, of the extension <code>.pyc</code>. Not really useful for Development purposes, so no point of pushing this into the repo</p> </li> <li> <p>instance/ and .db: This folder contains the SQLite3 db file, no need to push this as the server will maintain the database itself</p> </li> <li> <p>myenv: Your python virtual environment folder name, please don't push this, it's just annoying to see 10,000+ lines of code added and going through those changes. Instead, we push <code>requirements.txt</code>, so that the person who wants to run your code will make his own virtual environment and install all dependencies onto it manually.</p> </li> </ol>"},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/GITHUB/#making-changes","title":"Making changes","text":"<ul> <li>List version history <pre><code>git log\n</code></pre></li> <li>See differences from the previous commit in the branch <pre><code>git diff\n</code></pre></li> <li>Set files in current directory up for tracking, in preparation to <code>commit</code> <pre><code>git add .\n</code></pre></li> <li> <p>Permanently save the file changes as a <code>commit</code> with a message <pre><code>git commit -m \"[descriptive message]\"\n</code></pre></p> </li> <li> <p>Upload your local changes into your GitHub repo online (after commiting) <pre><code>git push\n</code></pre></p> </li> <li> <p>Download changes made onto the online GitHub repo into your local git repo <pre><code>git pull\n</code></pre></p> </li> </ul>"},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/GITHUB/#want-to-know-more","title":"Want to Know More?","text":"<p>If you're new to Git and GitHub, or want to dive deeper, here's an amazing resource that will guide you through everything you need to know to get started with Git.</p> <p>Introducing...</p>"},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/GITHUB/#the-git-guide-by-acm-bpdc","title":"The Git Guide, by ACM BPDC","text":""},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/HOSTING/","title":"Hosting Your Web Application","text":"<p>Great! You've built your web app and have it running locally on 127.0.0.1 (your machine).</p> <p>But what if you want to share your creation with the world?</p> <p>That\u2019s where deployment comes in.</p> <p></p> <p>There are methods to host your app locally, and allow people to connect to your server (your machine) directly to access your web application. There are broadly two methods for hosting your app on the internet:</p>"},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/HOSTING/#self-hosting","title":"Self hosting","text":"<p>This is what a few companies actually do, they have a dedicated machine to act as the server for their application, and requires quite a bit of setup and resources for it to work decently.</p>"},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/HOSTING/#cloud-hosting","title":"Cloud hosting","text":"<p>You know how in self hosting you had to dedicate your machine just for running as the application server? </p> <p>Well, what if someone gives one to you, so you don't have to dedicate your own resources, for a small price of course. Maybe over the internet, so you are not really getting a physical machine so to speak, but an access to use a physical machine that is connected to the internet.</p> <p>Well, that's the entire concept of a <code>Virtual Machine</code>, and Cloud Hosting in a nutshell.</p> <p>And this is also the entire business concept of AWS, Microsoft Azure, GCP, and many others. These are called <code>Web Hosting Services</code></p> <p>Much simper to host static websites rather than dynamic websites using servers.</p>"},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/HOSTING/#a-little-bit-about-the-internet","title":"A little bit about the internet","text":"<p>You'll need to have an idea of the following terms, just to get the overall picture:</p> <ul> <li> <p>IP Address</p> </li> <li> <p>Domain</p> </li> <li> <p>Sub Domain</p> </li> <li> <p>DNS</p> </li> </ul> <p>There's a whole bunch of other 100+ things involved, but to get you started, just the concept of these 4 should be enough.</p> <p>Now, a few web hosting services actually have a free tier, where they usually give you access to their resources to use as a web server, and a domain for you to access your web app, so you don't have to painfully type out the server ip address to access it.</p>"},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/HOSTING/#a-few-free-hosting-services-with-free-tier","title":"A few free hosting services (with free tier):**","text":"<ol> <li> <p>Python Anywhere</p> </li> <li> <p>Railway.app</p> </li> <li> <p>Render.com</p> </li> <li> <p>Streamlit</p> </li> <li> <p>GitHub Pages</p> </li> </ol> <p>We'll be using PythonAnywhere: A free to use web hosting service to host our web app.</p>"},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/PYTHONANYWHERE/","title":"Deploying your project on Python Anywhere","text":"<p>One popular and beginner-friendly platform for deploying Python applications is PythonAnywhere.</p> <p>Deploying your Python web app with PythonAnywhere is a simple and beginner-friendly process, which makes it pretty popular for deploying python based applications.</p> <p>Whether you\u2019re building a small project for fun, a portfolio, or something more complex, PythonAnywhere is a fantastic option for getting your Python app online quickly and effortlessly.</p> <p>\u201cIf you have a Python app, PythonAnywhere makes deployment as simple as a few clicks.\u201d</p> <p>We\u2019ll walk you through what PythonAnywhere is and how you can use it to host your Python web applications online.</p>"},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/PYTHONANYWHERE/#what-is-pythonanywhere","title":"What is PythonAnywhere?","text":"<p>PythonAnywhere is a cloud hosting service specifically designed for running Python applications.</p> <p>It allows you to deploy web apps without needing to worry about server management or configuration. Plus, it has a free tier, which is perfect for beginners and small projects.</p>"},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/PYTHONANYWHERE/#why-use-pythonanywhere","title":"Why Use PythonAnywhere?","text":"<ul> <li>Easy to use: You don\u2019t need to manage servers or install software manually.</li> <li>Accessible: It provides a browser-based interface for working with your code.</li> <li>Free tier: Perfect for hobby projects or simple web apps to get you started.</li> </ul>"},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/PYTHONANYWHERE/#key-features","title":"Key Features:","text":"<ol> <li>Web hosting: PythonAnywhere allows you to run web apps using frameworks like Flask, Django, or even simple WSGI applications.</li> <li>Python environment: You get a complete Python environment with access to libraries, frameworks, and virtual environments.</li> <li>Shell access: PythonAnywhere provides an online shell, so you can run terminal commands directly from your browser.</li> <li>Database hosting: You can also create and manage databases (MySQL, PostgreSQL) for your web apps.</li> </ol>"},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/PYTHONANYWHERE/#how-does-it-work","title":"How Does It Work?","text":"<p>PythonAnywhere provides you with access to a virtual machine running on the cloud. You can use this machine to host your Python apps, run scripts, and manage your databases.</p>"},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/PYTHONANYWHERE/#deploying-your-python-web-app-on-pythonanywhere","title":"Deploying your Python Web App on PythonAnywhere","text":"<ol> <li> <p>Sign up: First, go to PythonAnywhere and create a free account.</p> </li> <li> <p>Upload your code: After signing in, you can upload your Python app files directly via the web interface, or you can pull them from a version control system like GitHub. We'll be taking the second approach. Remember to use the following commands for managing dependencies:</p> </li> <li>To get all the external packages used in the project <pre><code>pip freeze &gt; requirements.txt\n</code></pre></li> <li> <p>To install all the external packages used in the project: <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Create your GitHub account</p> </li> <li>Create a public GitHub repo, and upload in the code from the workshop.</li> <li> <p>Once your code is available on GitHub, you can <code>clone</code> your repo into pythonanywhere (on pythonanywhere console) <pre><code>git clone https://github.com/{{YOUR_GITHUB_USERNAME}}/{{YOUR_REPO_NAME}}\n</code></pre></p> </li> <li> <p>Set up a web app:</p> </li> <li>Go to the Web tab in PythonAnywhere\u2019s dashboard.</li> <li>Select Add a new web app.</li> <li> <p>Choose your Python version and framework as Flask.</p> </li> <li> <p>Set the <code>Source Code</code> location to the path where your main flask app code is saved (usually the file where app = Flask(name) is defined in Flask)</p> </li> <li> <p>Set the working directory to the same location as above.</p> </li> <li> <p>Configure the WSGI file:</p> </li> <li>PythonAnywhere uses WSGI (Web Server Gateway Interface) to serve Python apps.</li> <li>You\u2019ll need to edit the WSGI configuration file to point to your Python app\u2019s entry point (again, usually the file where app = Flask(name) is defined in Flask).</li> <li> <p>Make the following changes in the <code>WSGI configuration file</code>:</p> <ul> <li>Set the project home: <pre><code># add your project directory to the sys.path\nproject_home = '{{PATH_TO_YOUR_PROJECT}}'\nif project_home not in sys.path:\n    sys.path = [project_home] + sys.path\n</code></pre> <pre><code>* Change the last line to import the `app` variable from our `run.py` file\n ```python\nfrom run import app as application \n</code></pre></li> </ul> </li> <li> <p>Run your app: Once everything is set up, you can click Reload to deploy your app. It will be accessible via a web link provided by PythonAnywhere, something like {{yourusername}}.pythonanywhere.com</p> </li> </ol> <p>You should now have a fully functioning portfolio website deployed on Python Anywhere!</p>"},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/PYTHONANYWHERE/#adding-the-quotes-api","title":"Adding the Quotes API","text":"<p>Now, we want an amazing quote to be displayed too!</p> <p>Let's try and place a quote under the \"Comments\" header.</p> <p>Add this in <code>style.css</code>: <pre><code>.quote {\n  color: #ffffff;\n  font-style: italic;\n}\n</code></pre> And then add in the quote div in <code>index.html</code>:</p> <pre><code>&lt;!-- Comments Section --&gt;\n&lt;section id=\"comments\" class=\"section comments-section\"&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;h2 class=\"text-center\"&gt;Comments&lt;/h2&gt;\n\n        &lt;div class=\"quote\"&gt;Insert Deep Quote Here&lt;/div&gt;\n</code></pre> <p>Ok so now we have an idea how a quote will look like on our website. Now, for actually inserting the quote?</p> <p>Check out The Quotes API</p> <p>What even is this.. what is an API?</p> <p>Great question! A wise man once told me, an API is like a translator. If you want to communicate with someone in Tamil, but you don't know Tamil and only know English, an API is the person who translates between the two and helps facilitating communication with each other.</p> <p>Note that it is possible for you to learn Tamil and communicate with the person you wanted to, but well, using an API is much simpler, right?</p> <p>Take this analogy of an API and apply it to the situtaion of you wanting to communicate with some external database, in this case a database of some amazing quotes!</p> <p>Now to test the <code>Quotes API</code>, create a temporary file <code>test.py</code> and explore how we can retrieve data from the API.</p> <pre><code>import requests\n\ncategory = 'amazing' # Choose one of the categories from the API docs\napi_url = 'https://api.api-ninjas.com/v1/quotes?category={}'.format(category)\nresponse = requests.get(api_url, headers={'X-Api-Key': 'YOUR_API_KEY'})\nif response.status_code == requests.codes.ok:\n    print(response.text)\nelse:\n    print(\"Error:\", response.status_code, response.text)\n</code></pre> <p>Important note: Here, your <code>API_KEY</code> is your Secret, do not share it with anyone.</p> <p>Now to apply this code into your website:</p> <ul> <li>Set a template variable to be passed in from flask called <code>amazing_quote</code> <pre><code>&lt;!-- Comments Section --&gt;\n&lt;section id=\"comments\" class=\"section comments-section\"&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;h2 class=\"text-center\"&gt;Comments&lt;/h2&gt;\n        &lt;div class=\"quote\"&gt;{{amazing_quote}}&lt;/div&gt;\n</code></pre></li> <li>Now set the variable with the help of the API: <pre><code># Route for the homepage\n@app.route('/')\ndef index():\n    comments = Comment.query.all()\n    category = 'computers'\n    api_url = 'https://api.api-ninjas.com/v1/quotes?category={}'.format(category)\n    response = requests.get(api_url, headers={'X-Api-Key': 'YOUR_API_KEY'})\n    if response.status_code == requests.codes.ok:\n        quote = response.json()[0]['quote']\n    else:\n        print(\"Error:\", response.status_code, response.text)\n\n    return render_template(\n        'index.html',\n        comments=[{'NAME': c.name, 'POSITION': c.position, 'COMMENT': c.comment} for c in comments],\n        amazing_quote=quote\n    )\n</code></pre></li> </ul> <p>Just to see which files have been edited: <pre><code>git status\n</code></pre> And then <code>push</code> your changes!</p> <pre><code>git add .\ngit commit -m \"final project ready!\n</code></pre> <p>Pushed? Your changes have now been added to your GitHub repo!</p> <p>Now, <code>pull</code> your changes into pythonanywhere (using the pythonanywhere console)</p> <pre><code>git pull\n</code></pre> <p>Then you're finally done! You've completed deployment and added a brand new feature! Hurray!</p> <p>Or.. have you..?</p> <p>You might have just made.. a grave mistake..</p> <p>Intense evil music plays</p> <p>Working with Secrets.. ringing any bells? Welcome to the world of cybersecurity.</p>"},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/SECRETS/","title":"Working with Secrets in Python","text":""},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/SECRETS/#whats-a-secret","title":"What's a secret?","text":"<p>First off, what is a secret in the context of developing web applications?</p> <p>A secret is just some kind of string value that you use in your app for some external service.</p> <p></p>"},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/SECRETS/#examples","title":"Examples","text":"<ol> <li> <p>Accessing a Databases : You want to connect to a database, which needs your code to have access to your db details</p> </li> <li> <p>Calling an API: You need your code to have acces to an <code>API key</code> for calling an API that requires one</p> </li> <li> <p>Project identification You may have to register your project with Google Cloud console or other similar platforms to use their services such as <code>OAuth</code>. Here they provide a <code>client ID</code> and <code>client secret</code>, which should not be revealed to anyone</p> </li> </ol> <p>Basically any kind of value which you do not want to reveal to anyone, but need your code to have access to, is a <code>Secret</code>, and it's super important to handle secrets with care. They must be managed appropriately to avoid any breach.</p>"},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/SECRETS/#the-danger","title":"The Danger","text":"<p>Secrets can be leaked in many ways. The most common place secrets are leaked are in version control systems like Github.</p> <p>If secrets are leaked, it can lead to a loss of trust, credibility, and even business. In some cases, leaked secrets can also lead to legal action. </p> <p>And now you know, that's why it's so important to have a plan for managing secrets.</p> <p>In summary, Never hardcode any secrets in your code!</p>"},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/SECRETS/#env-files-a-method-to-managing-secrets","title":".env files: A method to managing secrets","text":"<p>The <code>.env</code> file is used to store <code>environment variables</code> in Python. </p>"},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/SECRETS/#environment-variables","title":"Environment variables?","text":"<p>It's exactly what you think. Think of your python code as Monty Python. He is standing in a circus environment, a lot of things all over the place, but he can interact with them all.</p> <p>Point to be taken is: * Instead of carrying all his things on himself, he has an environment to keep his important things * He has access to the environment, and so he can interact with these things easily</p> <p>This is exactly the kind of thing we want to achieve, but with secrets. Create an environment and store all your secrets, then give access to this environment to your python code.</p> <p>Here, we use a <code>.env</code> file to act as an environment file.</p>"},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/SECRETS/#accessing-the-environment","title":"Accessing the environment","text":"<p>We will use Python's <code>python-dotenv</code> package for accessing the content of the <code>.env</code> file.  To get started, open up your Powershell/Terminal first, and install the package using the following command: <pre><code>pip install python-dotenv\n</code></pre></p> <p>Create a .env file and paste your secrets as key-value pairs, for example: <pre><code>// Secrets for Google OAuth\nCLIENT_ID = xxxxxx\nCLIENT_SECRET=xxxxxx\nAPI_KEY=xxxxx\n</code></pre></p> <p>And now an important disclaimer,</p> <p>This file should not be committed to your git repo</p> <p>To avoid this dangerous mistake, add a line into your <code>.gitignore</code>: <pre><code>.env\n</code></pre> We're now ready to roll! Use the following functions to load our secret values from the .env:</p> <pre><code>from dotenv import load_dotenv\nimport os\n\nload_dotenv()\n\nclient_id = os.getenv(\"CLIENT_ID\")\nclient_secret = os.getenv(\"CLIENT_SECRET\")\napi_key = os.getenv(\"API_KEY\")\n\nprint(\"CLIENT_ID: \", client_id )\nprint(\"CLIENT_SECRET: \", client_secret)\nprint(\"API_KEY: \", api_key)\n</code></pre> <p>And now you're all set to push to production!</p>"},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/src/Final%20Code/","title":"Final Code","text":""},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/src/Final%20Code/#html","title":"HTML","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;My Portfolio&lt;/title&gt;\n    &lt;!-- Link to Bootstrap for base styling --&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" integrity=\"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin=\"anonymous\"&gt;\n    &lt;!-- Custom font --&gt;\n    &lt;link href=\"https://fonts.googleapis.com/css2?family=Orbitron:wght@500&amp;display=swap\" rel=\"stylesheet\"&gt;\n    &lt;!-- Custom CSS --&gt;\n    &lt;link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/style.css') }}\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n    &lt;!-- Header with Navigation Links --&gt;\n    &lt;header class=\"header\"&gt;\n        &lt;a href=\"#home\" class=\"logo\"&gt;My Portfolio&lt;/a&gt;\n        &lt;nav class=\"nav-links\"&gt;\n            &lt;a href=\"#home\"&gt;Home&lt;/a&gt;\n            &lt;a href=\"#about\"&gt;About Me&lt;/a&gt;\n            &lt;a href=\"#comments\"&gt;Comments&lt;/a&gt;\n            &lt;a href=\"#contact\"&gt;Contact&lt;/a&gt;\n        &lt;/nav&gt;\n    &lt;/header&gt;\n\n    &lt;!-- Main Sections --&gt;\n    &lt;main&gt;\n        &lt;!-- Home Section --&gt;\n        &lt;section id=\"home\" class=\"section red-section\"&gt;\n            &lt;div class=\"content\"&gt;\n                &lt;h1 class=\"main-text\"&gt;Sanvit Katrekar&lt;/h1&gt;\n                &lt;p&gt;Welcome to my portfolio! I am excited to share my work with you.&lt;/p&gt;\n            &lt;/div&gt;\n        &lt;/section&gt;\n\n        &lt;!-- About Me Section --&gt;\n        &lt;section id=\"about\" class=\"section white-section\"&gt;\n            &lt;div class=\"content\"&gt;\n                &lt;h1&gt;About Me&lt;/h1&gt;\n                &lt;p&gt;Hello! I'm Sanvit Katrekar a web developer experienced in Flask, Python, and front-end technologies. I create responsive, user-friendly web applications.&lt;/p&gt;\n            &lt;/div&gt;\n        &lt;/section&gt;\n\n        &lt;!-- Comments Section --&gt;\n        &lt;section id=\"comments\" class=\"section comments-section\"&gt;\n            &lt;div class=\"container\"&gt;\n                &lt;h2 class=\"text-center\"&gt;Comments&lt;/h2&gt;\n                &lt;div class=\"quote\"&gt;{{amazing_quote}}&lt;/div&gt;\n\n                &lt;!-- Carousel for Comments--&gt;\n                &lt;div id=\"commentCarousel\" class=\"carousel slide\" data-ride=\"carousel\"&gt;\n                    &lt;div class=\"carousel-inner\"&gt;\n                        {% for comment in comments %}\n                            &lt;div class=\"carousel-item {% if loop.first %}active{% endif %}\"&gt;\n                                &lt;div class=\"comment-box\"&gt;\n                                    &lt;strong&gt;{{ comment['NAME'] }}&lt;/strong&gt; ({{ comment['POSITION'] }}):\n                                    &lt;p&gt;{{ comment['COMMENT'] }}&lt;/p&gt;\n                                &lt;/div&gt;\n                            &lt;/div&gt;\n                        {% endfor %}\n                    &lt;/div&gt;\n                    &lt;a class=\"carousel-control-prev\" href=\"#commentCarousel\" role=\"button\" data-slide=\"prev\"&gt;\n                        &lt;span class=\"carousel-control-prev-icon\" aria-hidden=\"true\"&gt;&lt;/span&gt;\n                        &lt;span class=\"sr-only\"&gt;Previous&lt;/span&gt;\n                    &lt;/a&gt;\n                    &lt;a class=\"carousel-control-next\" href=\"#commentCarousel\" role=\"button\" data-slide=\"next\"&gt;\n                        &lt;span class=\"carousel-control-next-icon\" aria-hidden=\"true\"&gt;&lt;/span&gt;\n                        &lt;span class=\"sr-only\"&gt;Next&lt;/span&gt;\n                    &lt;/a&gt;\n                &lt;/div&gt;\n\n                &lt;!-- Comment Form --&gt;\n                &lt;h3&gt;Add a Comment&lt;/h3&gt;\n                &lt;form action=\"/add_comment\" method=\"POST\" class=\"comment-form\"&gt;\n                    &lt;div class=\"form-group\"&gt;\n                        &lt;input type=\"text\" name=\"name\" class=\"form-control\" placeholder=\"Your Name\" required&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"form-group\"&gt;\n                        &lt;input type=\"text\" name=\"position\" class=\"form-control\" placeholder=\"Your Position\"&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"form-group\"&gt;\n                        &lt;textarea name=\"comment\" class=\"form-control\" placeholder=\"Your Comment\" rows=\"3\" required&gt;&lt;/textarea&gt;\n                    &lt;/div&gt;\n                    &lt;button type=\"submit\" class=\"btn btn-primary btn-submit\"&gt;Submit Comment&lt;/button&gt;\n                &lt;/form&gt;\n            &lt;/div&gt;\n        &lt;/section&gt;\n\n        &lt;!-- Contact Section --&gt;\n        &lt;section id=\"contact\" class=\"contact-section\"&gt;\n            &lt;div class=\"content\"&gt;\n                &lt;h2&gt;Contact&lt;/h2&gt;\n                &lt;p&gt;Email: &lt;a href=\"mailto:f20210059@dubai.bits-pilani.ac.in\"&gt;f20210059@dubai.bits-pilani.ac.in&lt;/a&gt;&lt;/p&gt;\n                &lt;div class=\"social-links\"&gt;\n                    &lt;a href=\"https://www.linkedin.com/in/sanvit-katrekar-1089452b2/\" target=\"_blank\"&gt;LinkedIn&lt;/a&gt;\n                    &lt;span&gt; | &lt;/span&gt;\n                    &lt;a href=\"https://github.com/Sanvit-Katrekar\" target=\"_blank\"&gt;GitHub&lt;/a&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/section&gt;\n    &lt;/main&gt;\n    &lt;!-- JavaScript for Carousel --&gt;\n    &lt;script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\" integrity=\"sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js\" integrity=\"sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.min.js\" integrity=\"sha384-w1Q4orYjBQndcko6MimVbzY0tgp4pWB4lZ7lr30WKz0vr/aWKhXdBNmNb5D92v7s\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n    &lt;!-- JavaScript for adding a popup when comments added --&gt;\n    &lt;script&gt;\n        document.addEventListener(\"DOMContentLoaded\", function() {\n            const form = document.querySelector('.comment-form');\n            form.addEventListener('submit', function(event) {\n                alert(\"Comment has been added!\");\n            });\n        });\n    &lt;/script&gt;\n\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/src/Final%20Code/#css","title":"CSS","text":"<pre><code>/* Reset and Default Styles */\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml, body {\n  scroll-behavior: smooth;\n  font-family: 'Orbitron', sans-serif;\n  overflow-x: hidden;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n}\n\n/* Header */\n.header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px 20px;\n  font-size: 1rem;\n  color: #ffffff;\n  background-color: #1b263b;\n  position: fixed;\n  top: 0;\n  width: 100%;\n  z-index: 1000;\n}\n\n.logo {\n  font-weight: bold;\n  text-decoration: none;\n  color: #ffffff;\n}\n\n.nav-links a {\n  text-decoration: none;\n  color: #ffffff;\n  margin-left: 15px;\n}\n\n.nav-links a:hover {\n  color: #a9d6e5;\n}\n\n/* Section Styling */\n.section {\n  min-height: 100vh;\n  padding-top: 80px; /* Adjusted for fixed header */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n}\n\n.content {\n  max-width: 600px;\n}\n\n/* Section Background Colors */\n.red-section {\n  background-image: url('../images/blue_mountain.jpg');\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  color: #121212;\n}\n\n.white-section {\n  background-color: #ffffff;\n  color: #121212;\n}\n\n.contact-section {\n  background-color: #f0f0f0;\n  color: #333;\n  padding: 40px 20px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  text-align: center;\n}\n\n.social-links a {\n  font-weight: bold;\n  color: #007bff;\n  margin: 0 10px;\n}\n\n.social-links a:hover {\n  text-decoration: underline;\n}\n\n/* Comments Section Styling */\n.comments-section {\n  background-color: #302b2b;\n  padding: 40px 20px;\n  text-align: center;\n}\n\n.comments-section h2, .comments-section h3 {\n  margin-bottom: 20px;\n  color: #ffffff;\n}\n\n/* Carousel Styling */\n.carousel {\n  width: 100%;\n  margin-bottom: 30px;\n}\n\n.carousel-inner {\n  max-width: 800px;\n  margin: 0 auto;\n}\n\n.comment-box {\n  background-color: #494545; /* Dark gray background */\n  color: #ffffff; /* White text color */\n  padding: 20px;\n  border-radius: 10px;\n  font-size: 1.1rem;\n  text-align: left;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Added shadow for depth */\n}\n\n/* Carousel Controls */\n.carousel-control-prev, .carousel-control-next {\n  color: #ffffff;\n}\n\n.carousel-control-prev-icon,\n.carousel-control-next-icon {\n  background-color: #ffffff; /* White icons */\n  border-radius: 50%;\n}\n\n/* Comment Form Styling */\n.comment-form {\n  max-width: 600px;\n  margin: 0 auto;\n  padding: 20px; /* Padding for better spacing */\n  background-color: #383838; /* Background color for form */\n  border-radius: 10px; /* Rounded corners */\n}\n\n.comment-form .form-group {\n  margin-bottom: 15px;\n}\n\n.comment-form .form-control {\n  font-size: 1rem;\n  padding: 10px;\n  background-color: #494949; /* Darker input background */\n  color: #ffffff; /* White text color */\n  border: none; /* Removed default border */\n  border-radius: 5px; /* Rounded corners */\n}\n\n.comment-form .form-control::placeholder {\n  color: #b0b0b0; /* Lighter placeholder color */\n}\n\n.btn-submit {\n  background-color: #ff6b6b;\n  border: none;\n  color: #fff;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  width: 100%;\n  border-radius: 5px; /* Rounded corners */\n  transition: background-color 0.3s; /* Smooth transition for hover */\n}\n\n.btn-submit:hover {\n  background-color: #ff8566;\n}\n\n.quote {\n  color: #ffffff;\n  font-style: italic;\n  margin-bottom: 30px;\n}\n</code></pre>"},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/src/Final%20Code/#flaskpython","title":"Flask/Python","text":"<pre><code>from flask import Flask, render_template, request, redirect\nfrom flask_sqlalchemy import SQLAlchemy\nimport requests\n\nfrom dotenv import load_dotenv\nimport os\nload_dotenv()\n\nAPI_KEY = os.getenv('API_KEY')\n\n# Initialize the Flask app\napp = Flask(__name__, static_folder='app/static', template_folder='app/templates')\n\n# Configure the SQLite database\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///comments.db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n\n# Initialize SQLAlchemy\ndb = SQLAlchemy(app)\n\n# Define the Comment model\nclass Comment(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), nullable=False)\n    position = db.Column(db.String(120))\n    comment = db.Column(db.Text, nullable=False)\n\n    def __repr__(self):\n        return f\"&lt;Comment {self.name}&gt;\"\n\n# Create the database tables (if not already created)\nwith app.app_context():\n    db.create_all()\n\n# Route for the homepage\n@app.route('/')\ndef index():\n    comments = Comment.query.all()\n    category = 'computers'\n    api_url = 'https://api.api-ninjas.com/v1/quotes?category={}'.format(category)\n    response = requests.get(api_url, headers={'X-Api-Key': API_KEY})\n    if response.status_code == requests.codes.ok:\n        quote = response.json()[0]['quote']\n    else:\n        print(\"Error:\", response.status_code, response.text)\n        quote = 'Loading...'\n\n    return render_template(\n        'index.html',\n        comments=[{'NAME': c.name, 'POSITION': c.position, 'COMMENT': c.comment} for c in comments],\n        amazing_quote=quote\n    )\n\n# Route for handling the form submission\n@app.route('/add_comment', methods=['POST'])\ndef add_comment():\n    name = request.form['name']\n    position = request.form['position']\n    comment_text = request.form['comment']\n\n    # Create a new comment instance and add it to the database\n    new_comment = Comment(name=name, position=position, comment=comment_text)\n    db.session.add(new_comment)\n    db.session.commit()\n    return redirect('/')\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>"},{"location":"Week%204%3A%20Deployment%20on%20PythonAnywhere/src/Final%20Code/#env","title":".env","text":"<pre><code>API_KEY=xxxxx\n</code></pre>"}]}